//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Fri Apr  4 18:23:36 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// master_d_AWVALID               O     1 reg
// master_d_AWADDR                O    32 reg
// master_d_AWPROT                O     3 reg
// master_d_AWLEN                 O     8 reg
// master_d_AWSIZE                O     3 reg
// master_d_AWBURST               O     2 reg
// master_d_AWID                  O     4 reg
// master_d_WVALID                O     1 reg
// master_d_WDATA                 O    32 reg
// master_d_WSTRB                 O     4 reg
// master_d_WLAST                 O     1 reg
// master_d_WID                   O     4 reg
// master_d_BREADY                O     1 reg
// master_d_ARVALID               O     1 reg
// master_d_ARADDR                O    32 reg
// master_d_ARPROT                O     3 reg
// master_d_ARLEN                 O     8 reg
// master_d_ARSIZE                O     3 reg
// master_d_ARBURST               O     2 reg
// master_d_ARID                  O     4 reg
// master_d_RREADY                O     1 reg
// master_i_AWVALID               O     1 reg
// master_i_AWADDR                O    32 reg
// master_i_AWPROT                O     3 reg
// master_i_AWLEN                 O     8 reg
// master_i_AWSIZE                O     3 reg
// master_i_AWBURST               O     2 reg
// master_i_AWID                  O     4 reg
// master_i_WVALID                O     1 reg
// master_i_WDATA                 O    32 reg
// master_i_WSTRB                 O     4 reg
// master_i_WLAST                 O     1 reg
// master_i_WID                   O     4 reg
// master_i_BREADY                O     1 reg
// master_i_ARVALID               O     1 reg
// master_i_ARADDR                O    32 reg
// master_i_ARPROT                O     3 reg
// master_i_ARLEN                 O     8 reg
// master_i_ARSIZE                O     3 reg
// master_i_ARBURST               O     2 reg
// master_i_ARID                  O     4 reg
// master_i_RREADY                O     1 reg
// RDY_sb_clint_msip_put          O     1 const
// RDY_sb_clint_mtip_put          O     1 const
// RDY_sb_clint_mtime_put         O     1 const
// RDY_sb_ext_interrupt_put       O     1 const
// io_dump_get                    O   103 reg
// RDY_io_dump_get                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master_d_AWREADY               I     1
// master_d_WREADY                I     1
// master_d_BVALID                I     1
// master_d_BRESP                 I     2 reg
// master_d_BID                   I     4 reg
// master_d_ARREADY               I     1
// master_d_RVALID                I     1
// master_d_RRESP                 I     2 reg
// master_d_RDATA                 I    32 reg
// master_d_RLAST                 I     1 reg
// master_d_RID                   I     4 reg
// master_i_AWREADY               I     1
// master_i_WREADY                I     1
// master_i_BVALID                I     1
// master_i_BRESP                 I     2 reg
// master_i_BID                   I     4 reg
// master_i_ARREADY               I     1
// master_i_RVALID                I     1
// master_i_RRESP                 I     2 reg
// master_i_RDATA                 I    32 reg
// master_i_RLAST                 I     1 reg
// master_i_RID                   I     4 reg
// sb_clint_msip_put              I     1 reg
// sb_clint_mtip_put              I     1 reg
// sb_clint_mtime_put             I    64 reg
// sb_ext_interrupt_put           I     1 reg
// EN_sb_clint_msip_put           I     1
// EN_sb_clint_mtip_put           I     1
// EN_sb_clint_mtime_put          I     1
// EN_sb_ext_interrupt_put        I     1
// EN_io_dump_get                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkeclass(CLK,
		RST_N,

		master_d_AWVALID,

		master_d_AWADDR,

		master_d_AWPROT,

		master_d_AWLEN,

		master_d_AWSIZE,

		master_d_AWBURST,

		master_d_AWID,

		master_d_AWREADY,

		master_d_WVALID,

		master_d_WDATA,

		master_d_WSTRB,

		master_d_WLAST,

		master_d_WID,

		master_d_WREADY,

		master_d_BVALID,
		master_d_BRESP,
		master_d_BID,

		master_d_BREADY,

		master_d_ARVALID,

		master_d_ARADDR,

		master_d_ARPROT,

		master_d_ARLEN,

		master_d_ARSIZE,

		master_d_ARBURST,

		master_d_ARID,

		master_d_ARREADY,

		master_d_RVALID,
		master_d_RRESP,
		master_d_RDATA,
		master_d_RLAST,
		master_d_RID,

		master_d_RREADY,

		master_i_AWVALID,

		master_i_AWADDR,

		master_i_AWPROT,

		master_i_AWLEN,

		master_i_AWSIZE,

		master_i_AWBURST,

		master_i_AWID,

		master_i_AWREADY,

		master_i_WVALID,

		master_i_WDATA,

		master_i_WSTRB,

		master_i_WLAST,

		master_i_WID,

		master_i_WREADY,

		master_i_BVALID,
		master_i_BRESP,
		master_i_BID,

		master_i_BREADY,

		master_i_ARVALID,

		master_i_ARADDR,

		master_i_ARPROT,

		master_i_ARLEN,

		master_i_ARSIZE,

		master_i_ARBURST,

		master_i_ARID,

		master_i_ARREADY,

		master_i_RVALID,
		master_i_RRESP,
		master_i_RDATA,
		master_i_RLAST,
		master_i_RID,

		master_i_RREADY,

		sb_clint_msip_put,
		EN_sb_clint_msip_put,
		RDY_sb_clint_msip_put,

		sb_clint_mtip_put,
		EN_sb_clint_mtip_put,
		RDY_sb_clint_mtip_put,

		sb_clint_mtime_put,
		EN_sb_clint_mtime_put,
		RDY_sb_clint_mtime_put,

		sb_ext_interrupt_put,
		EN_sb_ext_interrupt_put,
		RDY_sb_ext_interrupt_put,

		EN_io_dump_get,
		io_dump_get,
		RDY_io_dump_get);
  input  CLK;
  input  RST_N;

  // value method master_d_m_awvalid
  output master_d_AWVALID;

  // value method master_d_m_awaddr
  output [31 : 0] master_d_AWADDR;

  // value method master_d_m_awuser

  // value method master_d_m_awprot
  output [2 : 0] master_d_AWPROT;

  // value method master_d_m_awlen
  output [7 : 0] master_d_AWLEN;

  // value method master_d_m_awsize
  output [2 : 0] master_d_AWSIZE;

  // value method master_d_m_awburst
  output [1 : 0] master_d_AWBURST;

  // value method master_d_m_awid
  output [3 : 0] master_d_AWID;

  // action method master_d_m_awready
  input  master_d_AWREADY;

  // value method master_d_m_wvalid
  output master_d_WVALID;

  // value method master_d_m_wdata
  output [31 : 0] master_d_WDATA;

  // value method master_d_m_wstrb
  output [3 : 0] master_d_WSTRB;

  // value method master_d_m_wlast
  output master_d_WLAST;

  // value method master_d_m_wid
  output [3 : 0] master_d_WID;

  // action method master_d_m_wready
  input  master_d_WREADY;

  // action method master_d_m_bvalid
  input  master_d_BVALID;
  input  [1 : 0] master_d_BRESP;
  input  [3 : 0] master_d_BID;

  // value method master_d_m_bready
  output master_d_BREADY;

  // value method master_d_m_arvalid
  output master_d_ARVALID;

  // value method master_d_m_araddr
  output [31 : 0] master_d_ARADDR;

  // value method master_d_m_aruser

  // value method master_d_m_arprot
  output [2 : 0] master_d_ARPROT;

  // value method master_d_m_arlen
  output [7 : 0] master_d_ARLEN;

  // value method master_d_m_arsize
  output [2 : 0] master_d_ARSIZE;

  // value method master_d_m_arburst
  output [1 : 0] master_d_ARBURST;

  // value method master_d_m_arid
  output [3 : 0] master_d_ARID;

  // action method master_d_m_arready
  input  master_d_ARREADY;

  // action method master_d_m_rvalid
  input  master_d_RVALID;
  input  [1 : 0] master_d_RRESP;
  input  [31 : 0] master_d_RDATA;
  input  master_d_RLAST;
  input  [3 : 0] master_d_RID;

  // value method master_d_m_rready
  output master_d_RREADY;

  // value method master_i_m_awvalid
  output master_i_AWVALID;

  // value method master_i_m_awaddr
  output [31 : 0] master_i_AWADDR;

  // value method master_i_m_awuser

  // value method master_i_m_awprot
  output [2 : 0] master_i_AWPROT;

  // value method master_i_m_awlen
  output [7 : 0] master_i_AWLEN;

  // value method master_i_m_awsize
  output [2 : 0] master_i_AWSIZE;

  // value method master_i_m_awburst
  output [1 : 0] master_i_AWBURST;

  // value method master_i_m_awid
  output [3 : 0] master_i_AWID;

  // action method master_i_m_awready
  input  master_i_AWREADY;

  // value method master_i_m_wvalid
  output master_i_WVALID;

  // value method master_i_m_wdata
  output [31 : 0] master_i_WDATA;

  // value method master_i_m_wstrb
  output [3 : 0] master_i_WSTRB;

  // value method master_i_m_wlast
  output master_i_WLAST;

  // value method master_i_m_wid
  output [3 : 0] master_i_WID;

  // action method master_i_m_wready
  input  master_i_WREADY;

  // action method master_i_m_bvalid
  input  master_i_BVALID;
  input  [1 : 0] master_i_BRESP;
  input  [3 : 0] master_i_BID;

  // value method master_i_m_bready
  output master_i_BREADY;

  // value method master_i_m_arvalid
  output master_i_ARVALID;

  // value method master_i_m_araddr
  output [31 : 0] master_i_ARADDR;

  // value method master_i_m_aruser

  // value method master_i_m_arprot
  output [2 : 0] master_i_ARPROT;

  // value method master_i_m_arlen
  output [7 : 0] master_i_ARLEN;

  // value method master_i_m_arsize
  output [2 : 0] master_i_ARSIZE;

  // value method master_i_m_arburst
  output [1 : 0] master_i_ARBURST;

  // value method master_i_m_arid
  output [3 : 0] master_i_ARID;

  // action method master_i_m_arready
  input  master_i_ARREADY;

  // action method master_i_m_rvalid
  input  master_i_RVALID;
  input  [1 : 0] master_i_RRESP;
  input  [31 : 0] master_i_RDATA;
  input  master_i_RLAST;
  input  [3 : 0] master_i_RID;

  // value method master_i_m_rready
  output master_i_RREADY;

  // action method sb_clint_msip_put
  input  sb_clint_msip_put;
  input  EN_sb_clint_msip_put;
  output RDY_sb_clint_msip_put;

  // action method sb_clint_mtip_put
  input  sb_clint_mtip_put;
  input  EN_sb_clint_mtip_put;
  output RDY_sb_clint_mtip_put;

  // action method sb_clint_mtime_put
  input  [63 : 0] sb_clint_mtime_put;
  input  EN_sb_clint_mtime_put;
  output RDY_sb_clint_mtime_put;

  // action method sb_ext_interrupt_put
  input  sb_ext_interrupt_put;
  input  EN_sb_ext_interrupt_put;
  output RDY_sb_ext_interrupt_put;

  // actionvalue method io_dump_get
  input  EN_io_dump_get;
  output [102 : 0] io_dump_get;
  output RDY_io_dump_get;

  // signals for module outputs
  wire [102 : 0] io_dump_get;
  wire [31 : 0] master_d_ARADDR,
		master_d_AWADDR,
		master_d_WDATA,
		master_i_ARADDR,
		master_i_AWADDR,
		master_i_WDATA;
  wire [7 : 0] master_d_ARLEN, master_d_AWLEN, master_i_ARLEN, master_i_AWLEN;
  wire [3 : 0] master_d_ARID,
	       master_d_AWID,
	       master_d_WID,
	       master_d_WSTRB,
	       master_i_ARID,
	       master_i_AWID,
	       master_i_WID,
	       master_i_WSTRB;
  wire [2 : 0] master_d_ARPROT,
	       master_d_ARSIZE,
	       master_d_AWPROT,
	       master_d_AWSIZE,
	       master_i_ARPROT,
	       master_i_ARSIZE,
	       master_i_AWPROT,
	       master_i_AWSIZE;
  wire [1 : 0] master_d_ARBURST,
	       master_d_AWBURST,
	       master_i_ARBURST,
	       master_i_AWBURST;
  wire RDY_io_dump_get,
       RDY_sb_clint_msip_put,
       RDY_sb_clint_mtime_put,
       RDY_sb_clint_mtip_put,
       RDY_sb_ext_interrupt_put,
       master_d_ARVALID,
       master_d_AWVALID,
       master_d_BREADY,
       master_d_RREADY,
       master_d_WLAST,
       master_d_WVALID,
       master_i_ARVALID,
       master_i_AWVALID,
       master_i_BREADY,
       master_i_RREADY,
       master_i_WLAST,
       master_i_WVALID;

  // inlined wires
  wire rg_wEpoch_port1__read;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // ports of submodule fetch_xactor_f_rd_addr
  wire [51 : 0] fetch_xactor_f_rd_addr_D_IN, fetch_xactor_f_rd_addr_D_OUT;
  wire fetch_xactor_f_rd_addr_CLR,
       fetch_xactor_f_rd_addr_DEQ,
       fetch_xactor_f_rd_addr_EMPTY_N,
       fetch_xactor_f_rd_addr_ENQ,
       fetch_xactor_f_rd_addr_FULL_N;

  // ports of submodule fetch_xactor_f_rd_data
  wire [38 : 0] fetch_xactor_f_rd_data_D_IN, fetch_xactor_f_rd_data_D_OUT;
  wire fetch_xactor_f_rd_data_CLR,
       fetch_xactor_f_rd_data_DEQ,
       fetch_xactor_f_rd_data_EMPTY_N,
       fetch_xactor_f_rd_data_ENQ,
       fetch_xactor_f_rd_data_FULL_N;

  // ports of submodule fetch_xactor_f_wr_addr
  wire [51 : 0] fetch_xactor_f_wr_addr_D_IN, fetch_xactor_f_wr_addr_D_OUT;
  wire fetch_xactor_f_wr_addr_CLR,
       fetch_xactor_f_wr_addr_DEQ,
       fetch_xactor_f_wr_addr_EMPTY_N,
       fetch_xactor_f_wr_addr_ENQ;

  // ports of submodule fetch_xactor_f_wr_data
  wire [40 : 0] fetch_xactor_f_wr_data_D_IN, fetch_xactor_f_wr_data_D_OUT;
  wire fetch_xactor_f_wr_data_CLR,
       fetch_xactor_f_wr_data_DEQ,
       fetch_xactor_f_wr_data_EMPTY_N,
       fetch_xactor_f_wr_data_ENQ;

  // ports of submodule fetch_xactor_f_wr_resp
  wire [5 : 0] fetch_xactor_f_wr_resp_D_IN;
  wire fetch_xactor_f_wr_resp_CLR,
       fetch_xactor_f_wr_resp_DEQ,
       fetch_xactor_f_wr_resp_ENQ,
       fetch_xactor_f_wr_resp_FULL_N;

  // ports of submodule ff_inst_access_fault
  wire ff_inst_access_fault_CLR,
       ff_inst_access_fault_DEQ,
       ff_inst_access_fault_D_IN,
       ff_inst_access_fault_D_OUT,
       ff_inst_access_fault_EMPTY_N,
       ff_inst_access_fault_ENQ,
       ff_inst_access_fault_FULL_N;

  // ports of submodule ff_inst_request
  wire [33 : 0] ff_inst_request_D_IN, ff_inst_request_D_OUT;
  wire ff_inst_request_CLR,
       ff_inst_request_DEQ,
       ff_inst_request_EMPTY_N,
       ff_inst_request_ENQ,
       ff_inst_request_FULL_N;

  // ports of submodule ff_mem_access_fault
  wire ff_mem_access_fault_CLR,
       ff_mem_access_fault_DEQ,
       ff_mem_access_fault_D_IN,
       ff_mem_access_fault_ENQ;

  // ports of submodule ff_mem_request
  wire [69 : 0] ff_mem_request_D_IN, ff_mem_request_D_OUT;
  wire ff_mem_request_CLR,
       ff_mem_request_DEQ,
       ff_mem_request_EMPTY_N,
       ff_mem_request_ENQ,
       ff_mem_request_FULL_N;

  // ports of submodule memory_xactor_f_rd_addr
  wire [51 : 0] memory_xactor_f_rd_addr_D_IN, memory_xactor_f_rd_addr_D_OUT;
  wire memory_xactor_f_rd_addr_CLR,
       memory_xactor_f_rd_addr_DEQ,
       memory_xactor_f_rd_addr_EMPTY_N,
       memory_xactor_f_rd_addr_ENQ,
       memory_xactor_f_rd_addr_FULL_N;

  // ports of submodule memory_xactor_f_rd_data
  wire [38 : 0] memory_xactor_f_rd_data_D_IN, memory_xactor_f_rd_data_D_OUT;
  wire memory_xactor_f_rd_data_CLR,
       memory_xactor_f_rd_data_DEQ,
       memory_xactor_f_rd_data_EMPTY_N,
       memory_xactor_f_rd_data_ENQ,
       memory_xactor_f_rd_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_addr
  wire [51 : 0] memory_xactor_f_wr_addr_D_IN, memory_xactor_f_wr_addr_D_OUT;
  wire memory_xactor_f_wr_addr_CLR,
       memory_xactor_f_wr_addr_DEQ,
       memory_xactor_f_wr_addr_EMPTY_N,
       memory_xactor_f_wr_addr_ENQ,
       memory_xactor_f_wr_addr_FULL_N;

  // ports of submodule memory_xactor_f_wr_data
  wire [40 : 0] memory_xactor_f_wr_data_D_IN, memory_xactor_f_wr_data_D_OUT;
  wire memory_xactor_f_wr_data_CLR,
       memory_xactor_f_wr_data_DEQ,
       memory_xactor_f_wr_data_EMPTY_N,
       memory_xactor_f_wr_data_ENQ,
       memory_xactor_f_wr_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_resp
  wire [5 : 0] memory_xactor_f_wr_resp_D_IN, memory_xactor_f_wr_resp_D_OUT;
  wire memory_xactor_f_wr_resp_CLR,
       memory_xactor_f_wr_resp_DEQ,
       memory_xactor_f_wr_resp_EMPTY_N,
       memory_xactor_f_wr_resp_ENQ,
       memory_xactor_f_wr_resp_FULL_N;

  // ports of submodule riscv
  wire [102 : 0] riscv_dump_get;
  wire [69 : 0] riscv_memory_request_get;
  wire [63 : 0] riscv_clint_mtime_c_mtime;
  wire [34 : 0] riscv_inst_response_put;
  wire [33 : 0] riscv_inst_request_get, riscv_memory_response_put;
  wire [1 : 0] riscv_mv_curr_priv;
  wire riscv_EN_clint_msip,
       riscv_EN_clint_mtime,
       riscv_EN_clint_mtip,
       riscv_EN_dump_get,
       riscv_EN_ext_interrupt,
       riscv_EN_inst_request_get,
       riscv_EN_inst_response_put,
       riscv_EN_memory_request_get,
       riscv_EN_memory_response_put,
       riscv_RDY_dump_get,
       riscv_RDY_inst_request_get,
       riscv_RDY_inst_response_put,
       riscv_RDY_memory_request_get,
       riscv_clint_msip_intrpt,
       riscv_clint_mtip_intrpt,
       riscv_ext_interrupt_intrpt,
       riscv_mv_trap;

  // rule scheduling signals
  wire CAN_FIRE_RL_handle_fetch_request,
       CAN_FIRE_RL_handle_fetch_response,
       CAN_FIRE_RL_handle_inst_access_fault,
       CAN_FIRE_RL_handle_memoryRead_response,
       CAN_FIRE_RL_handle_memoryWrite_response,
       CAN_FIRE_RL_handle_memory_request,
       CAN_FIRE_RL_update_epochs,
       CAN_FIRE_io_dump_get,
       CAN_FIRE_master_d_m_arready,
       CAN_FIRE_master_d_m_awready,
       CAN_FIRE_master_d_m_bvalid,
       CAN_FIRE_master_d_m_rvalid,
       CAN_FIRE_master_d_m_wready,
       CAN_FIRE_master_i_m_arready,
       CAN_FIRE_master_i_m_awready,
       CAN_FIRE_master_i_m_bvalid,
       CAN_FIRE_master_i_m_rvalid,
       CAN_FIRE_master_i_m_wready,
       CAN_FIRE_sb_clint_msip_put,
       CAN_FIRE_sb_clint_mtime_put,
       CAN_FIRE_sb_clint_mtip_put,
       CAN_FIRE_sb_ext_interrupt_put,
       WILL_FIRE_RL_handle_fetch_request,
       WILL_FIRE_RL_handle_fetch_response,
       WILL_FIRE_RL_handle_inst_access_fault,
       WILL_FIRE_RL_handle_memoryRead_response,
       WILL_FIRE_RL_handle_memoryWrite_response,
       WILL_FIRE_RL_handle_memory_request,
       WILL_FIRE_RL_update_epochs,
       WILL_FIRE_io_dump_get,
       WILL_FIRE_master_d_m_arready,
       WILL_FIRE_master_d_m_awready,
       WILL_FIRE_master_d_m_bvalid,
       WILL_FIRE_master_d_m_rvalid,
       WILL_FIRE_master_d_m_wready,
       WILL_FIRE_master_i_m_arready,
       WILL_FIRE_master_i_m_awready,
       WILL_FIRE_master_i_m_bvalid,
       WILL_FIRE_master_i_m_rvalid,
       WILL_FIRE_master_i_m_wready,
       WILL_FIRE_sb_clint_msip_put,
       WILL_FIRE_sb_clint_mtime_put,
       WILL_FIRE_sb_clint_mtip_put,
       WILL_FIRE_sb_ext_interrupt_put;

  // inputs to muxes for submodule ports
  wire [34 : 0] MUX_riscv_inst_response_put_1__VAL_1,
		MUX_riscv_inst_response_put_1__VAL_2;
  wire [33 : 0] MUX_riscv_memory_response_put_1__VAL_1,
		MUX_riscv_memory_response_put_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d17;
  reg TASK_testplusargs___d18;
  reg TASK_testplusargs___d19;
  reg [63 : 0] v__h1969;
  reg TASK_testplusargs___d46;
  reg TASK_testplusargs___d47;
  reg TASK_testplusargs___d48;
  reg [63 : 0] v__h2350;
  reg TASK_testplusargs___d71;
  reg TASK_testplusargs___d72;
  reg TASK_testplusargs___d73;
  reg [63 : 0] v__h2549;
  reg TASK_testplusargs___d118;
  reg TASK_testplusargs___d119;
  reg TASK_testplusargs___d120;
  reg [63 : 0] v__h4293;
  reg TASK_testplusargs___d126;
  reg TASK_testplusargs___d127;
  reg TASK_testplusargs___d128;
  reg [63 : 0] v__h4449;
  reg TASK_testplusargs___d138;
  reg TASK_testplusargs___d139;
  reg TASK_testplusargs___d140;
  reg [63 : 0] v__h2909;
  reg TASK_testplusargs___d181;
  reg TASK_testplusargs___d182;
  reg TASK_testplusargs___d183;
  reg [63 : 0] v__h5086;
  reg TASK_testplusargs___d212;
  reg TASK_testplusargs___d213;
  reg TASK_testplusargs___d214;
  reg [63 : 0] v__h5381;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d52;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d54;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d56;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d61;
  reg riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123;
  reg riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131;
  reg NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d63;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d65;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d187;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d189;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d191;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d196;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d198;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d200;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d218;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d220;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d222;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d227;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3,
	       w_wdata__h3100;
  reg [3 : 0] write_strobe__h2618;
  wire [31 : 0] lv_data__h2166,
		memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164,
		put_data__h4677,
		put_data__h5283,
		put_inst__h2189;
  wire [15 : 0] memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q2;
  wire [7 : 0] memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q1;
  wire [4 : 0] lv_shift__h2165, lv_shift__h4656;
  wire [3 : 0] w_wstrb__h3101, write_strobe___1__h4166;
  wire [2 : 0] value__h2034, x__h2807;
  wire rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89,
       x_port1__read__h2628;

  // value method master_d_m_awvalid
  assign master_d_AWVALID = memory_xactor_f_wr_addr_EMPTY_N ;

  // value method master_d_m_awaddr
  assign master_d_AWADDR = memory_xactor_f_wr_addr_D_OUT[51:20] ;

  // value method master_d_m_awprot
  assign master_d_AWPROT = memory_xactor_f_wr_addr_D_OUT[19:17] ;

  // value method master_d_m_awlen
  assign master_d_AWLEN = memory_xactor_f_wr_addr_D_OUT[16:9] ;

  // value method master_d_m_awsize
  assign master_d_AWSIZE = memory_xactor_f_wr_addr_D_OUT[8:6] ;

  // value method master_d_m_awburst
  assign master_d_AWBURST = memory_xactor_f_wr_addr_D_OUT[5:4] ;

  // value method master_d_m_awid
  assign master_d_AWID = memory_xactor_f_wr_addr_D_OUT[3:0] ;

  // action method master_d_m_awready
  assign CAN_FIRE_master_d_m_awready = 1'd1 ;
  assign WILL_FIRE_master_d_m_awready = 1'd1 ;

  // value method master_d_m_wvalid
  assign master_d_WVALID = memory_xactor_f_wr_data_EMPTY_N ;

  // value method master_d_m_wdata
  assign master_d_WDATA = memory_xactor_f_wr_data_D_OUT[40:9] ;

  // value method master_d_m_wstrb
  assign master_d_WSTRB = memory_xactor_f_wr_data_D_OUT[8:5] ;

  // value method master_d_m_wlast
  assign master_d_WLAST = memory_xactor_f_wr_data_D_OUT[0] ;

  // value method master_d_m_wid
  assign master_d_WID = memory_xactor_f_wr_data_D_OUT[4:1] ;

  // action method master_d_m_wready
  assign CAN_FIRE_master_d_m_wready = 1'd1 ;
  assign WILL_FIRE_master_d_m_wready = 1'd1 ;

  // action method master_d_m_bvalid
  assign CAN_FIRE_master_d_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_bvalid = 1'd1 ;

  // value method master_d_m_bready
  assign master_d_BREADY = memory_xactor_f_wr_resp_FULL_N ;

  // value method master_d_m_arvalid
  assign master_d_ARVALID = memory_xactor_f_rd_addr_EMPTY_N ;

  // value method master_d_m_araddr
  assign master_d_ARADDR = memory_xactor_f_rd_addr_D_OUT[51:20] ;

  // value method master_d_m_arprot
  assign master_d_ARPROT = memory_xactor_f_rd_addr_D_OUT[19:17] ;

  // value method master_d_m_arlen
  assign master_d_ARLEN = memory_xactor_f_rd_addr_D_OUT[13:6] ;

  // value method master_d_m_arsize
  assign master_d_ARSIZE = memory_xactor_f_rd_addr_D_OUT[16:14] ;

  // value method master_d_m_arburst
  assign master_d_ARBURST = memory_xactor_f_rd_addr_D_OUT[5:4] ;

  // value method master_d_m_arid
  assign master_d_ARID = memory_xactor_f_rd_addr_D_OUT[3:0] ;

  // action method master_d_m_arready
  assign CAN_FIRE_master_d_m_arready = 1'd1 ;
  assign WILL_FIRE_master_d_m_arready = 1'd1 ;

  // action method master_d_m_rvalid
  assign CAN_FIRE_master_d_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_rvalid = 1'd1 ;

  // value method master_d_m_rready
  assign master_d_RREADY = memory_xactor_f_rd_data_FULL_N ;

  // value method master_i_m_awvalid
  assign master_i_AWVALID = fetch_xactor_f_wr_addr_EMPTY_N ;

  // value method master_i_m_awaddr
  assign master_i_AWADDR = fetch_xactor_f_wr_addr_D_OUT[51:20] ;

  // value method master_i_m_awprot
  assign master_i_AWPROT = fetch_xactor_f_wr_addr_D_OUT[19:17] ;

  // value method master_i_m_awlen
  assign master_i_AWLEN = fetch_xactor_f_wr_addr_D_OUT[16:9] ;

  // value method master_i_m_awsize
  assign master_i_AWSIZE = fetch_xactor_f_wr_addr_D_OUT[8:6] ;

  // value method master_i_m_awburst
  assign master_i_AWBURST = fetch_xactor_f_wr_addr_D_OUT[5:4] ;

  // value method master_i_m_awid
  assign master_i_AWID = fetch_xactor_f_wr_addr_D_OUT[3:0] ;

  // action method master_i_m_awready
  assign CAN_FIRE_master_i_m_awready = 1'd1 ;
  assign WILL_FIRE_master_i_m_awready = 1'd1 ;

  // value method master_i_m_wvalid
  assign master_i_WVALID = fetch_xactor_f_wr_data_EMPTY_N ;

  // value method master_i_m_wdata
  assign master_i_WDATA = fetch_xactor_f_wr_data_D_OUT[40:9] ;

  // value method master_i_m_wstrb
  assign master_i_WSTRB = fetch_xactor_f_wr_data_D_OUT[8:5] ;

  // value method master_i_m_wlast
  assign master_i_WLAST = fetch_xactor_f_wr_data_D_OUT[0] ;

  // value method master_i_m_wid
  assign master_i_WID = fetch_xactor_f_wr_data_D_OUT[4:1] ;

  // action method master_i_m_wready
  assign CAN_FIRE_master_i_m_wready = 1'd1 ;
  assign WILL_FIRE_master_i_m_wready = 1'd1 ;

  // action method master_i_m_bvalid
  assign CAN_FIRE_master_i_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_bvalid = 1'd1 ;

  // value method master_i_m_bready
  assign master_i_BREADY = fetch_xactor_f_wr_resp_FULL_N ;

  // value method master_i_m_arvalid
  assign master_i_ARVALID = fetch_xactor_f_rd_addr_EMPTY_N ;

  // value method master_i_m_araddr
  assign master_i_ARADDR = fetch_xactor_f_rd_addr_D_OUT[51:20] ;

  // value method master_i_m_arprot
  assign master_i_ARPROT = fetch_xactor_f_rd_addr_D_OUT[19:17] ;

  // value method master_i_m_arlen
  assign master_i_ARLEN = fetch_xactor_f_rd_addr_D_OUT[13:6] ;

  // value method master_i_m_arsize
  assign master_i_ARSIZE = fetch_xactor_f_rd_addr_D_OUT[16:14] ;

  // value method master_i_m_arburst
  assign master_i_ARBURST = fetch_xactor_f_rd_addr_D_OUT[5:4] ;

  // value method master_i_m_arid
  assign master_i_ARID = fetch_xactor_f_rd_addr_D_OUT[3:0] ;

  // action method master_i_m_arready
  assign CAN_FIRE_master_i_m_arready = 1'd1 ;
  assign WILL_FIRE_master_i_m_arready = 1'd1 ;

  // action method master_i_m_rvalid
  assign CAN_FIRE_master_i_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_rvalid = 1'd1 ;

  // value method master_i_m_rready
  assign master_i_RREADY = fetch_xactor_f_rd_data_FULL_N ;

  // action method sb_clint_msip_put
  assign RDY_sb_clint_msip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_msip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_msip_put = EN_sb_clint_msip_put ;

  // action method sb_clint_mtip_put
  assign RDY_sb_clint_mtip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtip_put = EN_sb_clint_mtip_put ;

  // action method sb_clint_mtime_put
  assign RDY_sb_clint_mtime_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtime_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtime_put = EN_sb_clint_mtime_put ;

  // action method sb_ext_interrupt_put
  assign RDY_sb_ext_interrupt_put = 1'd1 ;
  assign CAN_FIRE_sb_ext_interrupt_put = 1'd1 ;
  assign WILL_FIRE_sb_ext_interrupt_put = EN_sb_ext_interrupt_put ;

  // actionvalue method io_dump_get
  assign io_dump_get = riscv_dump_get ;
  assign RDY_io_dump_get = riscv_RDY_dump_get ;
  assign CAN_FIRE_io_dump_get = riscv_RDY_dump_get ;
  assign WILL_FIRE_io_dump_get = EN_io_dump_get ;

  // submodule fetch_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) fetch_xactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_addr_D_IN),
								 .ENQ(fetch_xactor_f_rd_addr_ENQ),
								 .DEQ(fetch_xactor_f_rd_addr_DEQ),
								 .CLR(fetch_xactor_f_rd_addr_CLR),
								 .D_OUT(fetch_xactor_f_rd_addr_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_addr_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_addr_EMPTY_N));

  // submodule fetch_xactor_f_rd_data
  FIFO2 #(.width(32'd39), .guarded(1'd1)) fetch_xactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_data_D_IN),
								 .ENQ(fetch_xactor_f_rd_data_ENQ),
								 .DEQ(fetch_xactor_f_rd_data_DEQ),
								 .CLR(fetch_xactor_f_rd_data_CLR),
								 .D_OUT(fetch_xactor_f_rd_data_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_data_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) fetch_xactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_addr_D_IN),
								 .ENQ(fetch_xactor_f_wr_addr_ENQ),
								 .DEQ(fetch_xactor_f_wr_addr_DEQ),
								 .CLR(fetch_xactor_f_wr_addr_CLR),
								 .D_OUT(fetch_xactor_f_wr_addr_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_addr_EMPTY_N));

  // submodule fetch_xactor_f_wr_data
  FIFO2 #(.width(32'd41), .guarded(1'd1)) fetch_xactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_data_D_IN),
								 .ENQ(fetch_xactor_f_wr_data_ENQ),
								 .DEQ(fetch_xactor_f_wr_data_DEQ),
								 .CLR(fetch_xactor_f_wr_data_CLR),
								 .D_OUT(fetch_xactor_f_wr_data_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) fetch_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fetch_xactor_f_wr_resp_D_IN),
								.ENQ(fetch_xactor_f_wr_resp_ENQ),
								.DEQ(fetch_xactor_f_wr_resp_DEQ),
								.CLR(fetch_xactor_f_wr_resp_CLR),
								.D_OUT(),
								.FULL_N(fetch_xactor_f_wr_resp_FULL_N),
								.EMPTY_N());

  // submodule ff_inst_access_fault
  FIFO2 #(.width(32'd1), .guarded(1'd1)) ff_inst_access_fault(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_inst_access_fault_D_IN),
							      .ENQ(ff_inst_access_fault_ENQ),
							      .DEQ(ff_inst_access_fault_DEQ),
							      .CLR(ff_inst_access_fault_CLR),
							      .D_OUT(ff_inst_access_fault_D_OUT),
							      .FULL_N(ff_inst_access_fault_FULL_N),
							      .EMPTY_N(ff_inst_access_fault_EMPTY_N));

  // submodule ff_inst_request
  FIFO2 #(.width(32'd34), .guarded(1'd1)) ff_inst_request(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_inst_request_D_IN),
							  .ENQ(ff_inst_request_ENQ),
							  .DEQ(ff_inst_request_DEQ),
							  .CLR(ff_inst_request_CLR),
							  .D_OUT(ff_inst_request_D_OUT),
							  .FULL_N(ff_inst_request_FULL_N),
							  .EMPTY_N(ff_inst_request_EMPTY_N));

  // submodule ff_mem_access_fault
  FIFO2 #(.width(32'd1), .guarded(1'd1)) ff_mem_access_fault(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_mem_access_fault_D_IN),
							     .ENQ(ff_mem_access_fault_ENQ),
							     .DEQ(ff_mem_access_fault_DEQ),
							     .CLR(ff_mem_access_fault_CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ff_mem_request
  FIFO2 #(.width(32'd70), .guarded(1'd1)) ff_mem_request(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_mem_request_D_IN),
							 .ENQ(ff_mem_request_ENQ),
							 .DEQ(ff_mem_request_DEQ),
							 .CLR(ff_mem_request_CLR),
							 .D_OUT(ff_mem_request_D_OUT),
							 .FULL_N(ff_mem_request_FULL_N),
							 .EMPTY_N(ff_mem_request_EMPTY_N));

  // submodule memory_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_addr_D_IN),
								  .ENQ(memory_xactor_f_rd_addr_ENQ),
								  .DEQ(memory_xactor_f_rd_addr_DEQ),
								  .CLR(memory_xactor_f_rd_addr_CLR),
								  .D_OUT(memory_xactor_f_rd_addr_D_OUT),
								  .FULL_N(memory_xactor_f_rd_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_addr_EMPTY_N));

  // submodule memory_xactor_f_rd_data
  FIFO2 #(.width(32'd39), .guarded(1'd1)) memory_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_data_D_IN),
								  .ENQ(memory_xactor_f_rd_data_ENQ),
								  .DEQ(memory_xactor_f_rd_data_DEQ),
								  .CLR(memory_xactor_f_rd_data_CLR),
								  .D_OUT(memory_xactor_f_rd_data_D_OUT),
								  .FULL_N(memory_xactor_f_rd_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_data_EMPTY_N));

  // submodule memory_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_addr_D_IN),
								  .ENQ(memory_xactor_f_wr_addr_ENQ),
								  .DEQ(memory_xactor_f_wr_addr_DEQ),
								  .CLR(memory_xactor_f_wr_addr_CLR),
								  .D_OUT(memory_xactor_f_wr_addr_D_OUT),
								  .FULL_N(memory_xactor_f_wr_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_addr_EMPTY_N));

  // submodule memory_xactor_f_wr_data
  FIFO2 #(.width(32'd41), .guarded(1'd1)) memory_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_data_D_IN),
								  .ENQ(memory_xactor_f_wr_data_ENQ),
								  .DEQ(memory_xactor_f_wr_data_DEQ),
								  .CLR(memory_xactor_f_wr_data_CLR),
								  .D_OUT(memory_xactor_f_wr_data_D_OUT),
								  .FULL_N(memory_xactor_f_wr_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_data_EMPTY_N));

  // submodule memory_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) memory_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(memory_xactor_f_wr_resp_D_IN),
								 .ENQ(memory_xactor_f_wr_resp_ENQ),
								 .DEQ(memory_xactor_f_wr_resp_DEQ),
								 .CLR(memory_xactor_f_wr_resp_CLR),
								 .D_OUT(memory_xactor_f_wr_resp_D_OUT),
								 .FULL_N(memory_xactor_f_wr_resp_FULL_N),
								 .EMPTY_N(memory_xactor_f_wr_resp_EMPTY_N));

  // submodule riscv
  mkriscv riscv(.resetpc(32'd4096),
		.CLK(CLK),
		.RST_N(RST_N),
		.clint_msip_intrpt(riscv_clint_msip_intrpt),
		.clint_mtime_c_mtime(riscv_clint_mtime_c_mtime),
		.clint_mtip_intrpt(riscv_clint_mtip_intrpt),
		.ext_interrupt_intrpt(riscv_ext_interrupt_intrpt),
		.inst_response_put(riscv_inst_response_put),
		.memory_response_put(riscv_memory_response_put),
		.EN_inst_request_get(riscv_EN_inst_request_get),
		.EN_inst_response_put(riscv_EN_inst_response_put),
		.EN_memory_request_get(riscv_EN_memory_request_get),
		.EN_memory_response_put(riscv_EN_memory_response_put),
		.EN_clint_msip(riscv_EN_clint_msip),
		.EN_clint_mtip(riscv_EN_clint_mtip),
		.EN_clint_mtime(riscv_EN_clint_mtime),
		.EN_ext_interrupt(riscv_EN_ext_interrupt),
		.EN_dump_get(riscv_EN_dump_get),
		.inst_request_get(riscv_inst_request_get),
		.RDY_inst_request_get(riscv_RDY_inst_request_get),
		.RDY_inst_response_put(riscv_RDY_inst_response_put),
		.memory_request_get(riscv_memory_request_get),
		.RDY_memory_request_get(riscv_RDY_memory_request_get),
		.RDY_memory_response_put(),
		.RDY_clint_msip(),
		.RDY_clint_mtip(),
		.RDY_clint_mtime(),
		.RDY_ext_interrupt(),
		.dump_get(riscv_dump_get),
		.RDY_dump_get(riscv_RDY_dump_get),
		.mv_curr_priv(riscv_mv_curr_priv),
		.RDY_mv_curr_priv(),
		.mv_trap(riscv_mv_trap),
		.RDY_mv_trap());

  // rule RL_update_epochs
  assign CAN_FIRE_RL_update_epochs = riscv_mv_trap ;
  assign WILL_FIRE_RL_update_epochs = riscv_mv_trap ;

  // rule RL_handle_fetch_request
  assign CAN_FIRE_RL_handle_fetch_request =
	     riscv_RDY_inst_request_get && fetch_xactor_f_rd_addr_FULL_N &&
	     ff_inst_access_fault_FULL_N &&
	     ff_inst_request_FULL_N ;
  assign WILL_FIRE_RL_handle_fetch_request =
	     CAN_FIRE_RL_handle_fetch_request ;

  // rule RL_handle_fetch_response
  assign CAN_FIRE_RL_handle_fetch_response =
	     riscv_RDY_inst_response_put && ff_inst_access_fault_EMPTY_N &&
	     fetch_xactor_f_rd_data_EMPTY_N &&
	     ff_inst_request_EMPTY_N &&
	     !ff_inst_access_fault_D_OUT ;
  assign WILL_FIRE_RL_handle_fetch_response =
	     CAN_FIRE_RL_handle_fetch_response ;

  // rule RL_handle_inst_access_fault
  assign CAN_FIRE_RL_handle_inst_access_fault =
	     riscv_RDY_inst_response_put && ff_inst_access_fault_EMPTY_N &&
	     ff_inst_request_EMPTY_N &&
	     ff_inst_access_fault_D_OUT ;
  assign WILL_FIRE_RL_handle_inst_access_fault =
	     CAN_FIRE_RL_handle_inst_access_fault ;

  // rule RL_handle_memory_request
  assign CAN_FIRE_RL_handle_memory_request =
	     riscv_RDY_memory_request_get && ff_mem_request_FULL_N &&
	     memory_xactor_f_wr_addr_FULL_N &&
	     memory_xactor_f_wr_data_FULL_N &&
	     memory_xactor_f_rd_addr_FULL_N ;
  assign WILL_FIRE_RL_handle_memory_request =
	     CAN_FIRE_RL_handle_memory_request ;

  // rule RL_handle_memoryRead_response
  assign CAN_FIRE_RL_handle_memoryRead_response =
	     ff_mem_request_EMPTY_N && memory_xactor_f_rd_data_EMPTY_N &&
	     ff_mem_request_D_OUT[5:4] == 2'd0 ;
  assign WILL_FIRE_RL_handle_memoryRead_response =
	     CAN_FIRE_RL_handle_memoryRead_response ;

  // rule RL_handle_memoryWrite_response
  assign CAN_FIRE_RL_handle_memoryWrite_response =
	     ff_mem_request_EMPTY_N && memory_xactor_f_wr_resp_EMPTY_N &&
	     ff_mem_request_D_OUT[5:4] == 2'd1 ;
  assign WILL_FIRE_RL_handle_memoryWrite_response =
	     CAN_FIRE_RL_handle_memoryWrite_response ;

  // inputs to muxes for submodule ports
  assign MUX_riscv_inst_response_put_1__VAL_1 =
	     { put_inst__h2189,
	       ff_inst_request_D_OUT[1:0],
	       fetch_xactor_f_rd_data_D_OUT[38:37] != 2'd0 } ;
  assign MUX_riscv_inst_response_put_1__VAL_2 =
	     { ff_inst_request_D_OUT, 1'd1 } ;
  assign MUX_riscv_memory_response_put_1__VAL_1 =
	     { put_data__h4677,
	       memory_xactor_f_rd_data_D_OUT[38:37] != 2'd0,
	       ff_mem_request_D_OUT[0] } ;
  assign MUX_riscv_memory_response_put_1__VAL_2 =
	     { put_data__h5283,
	       memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd0,
	       ff_mem_request_D_OUT[0] } ;

  // inlined wires
  assign rg_wEpoch_port1__read = riscv_mv_trap ? ~rg_wEpoch : rg_wEpoch ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = rg_wEpoch_port1__read ;
  assign rg_wEpoch_EN = 1'b1 ;

  // submodule fetch_xactor_f_rd_addr
  assign fetch_xactor_f_rd_addr_D_IN =
	     { riscv_inst_request_get[33:2], value__h2034, 17'd32784 } ;
  assign fetch_xactor_f_rd_addr_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign fetch_xactor_f_rd_addr_DEQ =
	     fetch_xactor_f_rd_addr_EMPTY_N && master_i_ARREADY ;
  assign fetch_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_rd_data
  assign fetch_xactor_f_rd_data_D_IN =
	     { master_i_RRESP,
	       master_i_RDATA,
	       master_i_RLAST,
	       master_i_RID } ;
  assign fetch_xactor_f_rd_data_ENQ =
	     master_i_RVALID && fetch_xactor_f_rd_data_FULL_N ;
  assign fetch_xactor_f_rd_data_DEQ = CAN_FIRE_RL_handle_fetch_response ;
  assign fetch_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_addr
  assign fetch_xactor_f_wr_addr_D_IN = 52'h0 ;
  assign fetch_xactor_f_wr_addr_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_addr_DEQ =
	     fetch_xactor_f_wr_addr_EMPTY_N && master_i_AWREADY ;
  assign fetch_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_data
  assign fetch_xactor_f_wr_data_D_IN = 41'h0 ;
  assign fetch_xactor_f_wr_data_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_data_DEQ =
	     fetch_xactor_f_wr_data_EMPTY_N && master_i_WREADY ;
  assign fetch_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_resp
  assign fetch_xactor_f_wr_resp_D_IN = { master_i_BRESP, master_i_BID } ;
  assign fetch_xactor_f_wr_resp_ENQ =
	     master_i_BVALID && fetch_xactor_f_wr_resp_FULL_N ;
  assign fetch_xactor_f_wr_resp_DEQ = 1'b0 ;
  assign fetch_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule ff_inst_access_fault
  assign ff_inst_access_fault_D_IN = 1'd0 ;
  assign ff_inst_access_fault_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign ff_inst_access_fault_DEQ =
	     WILL_FIRE_RL_handle_inst_access_fault ||
	     WILL_FIRE_RL_handle_fetch_response ;
  assign ff_inst_access_fault_CLR = 1'b0 ;

  // submodule ff_inst_request
  assign ff_inst_request_D_IN = riscv_inst_request_get ;
  assign ff_inst_request_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign ff_inst_request_DEQ =
	     WILL_FIRE_RL_handle_inst_access_fault ||
	     WILL_FIRE_RL_handle_fetch_response ;
  assign ff_inst_request_CLR = 1'b0 ;

  // submodule ff_mem_access_fault
  assign ff_mem_access_fault_D_IN = 1'b0 ;
  assign ff_mem_access_fault_ENQ = 1'b0 ;
  assign ff_mem_access_fault_DEQ = 1'b0 ;
  assign ff_mem_access_fault_CLR = 1'b0 ;

  // submodule ff_mem_request
  assign ff_mem_request_D_IN =
	     { riscv_memory_request_get[69:38],
	       w_wdata__h3100,
	       riscv_memory_request_get[5:0] } ;
  assign ff_mem_request_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 ;
  assign ff_mem_request_DEQ =
	     WILL_FIRE_RL_handle_memoryWrite_response ||
	     WILL_FIRE_RL_handle_memoryRead_response ;
  assign ff_mem_request_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_addr
  assign memory_xactor_f_rd_addr_D_IN =
	     { riscv_memory_request_get[69:38], 3'd1, x__h2807, 14'd16 } ;
  assign memory_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	     riscv_memory_request_get[5:4] != 2'd1 ;
  assign memory_xactor_f_rd_addr_DEQ =
	     memory_xactor_f_rd_addr_EMPTY_N && master_d_ARREADY ;
  assign memory_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_data
  assign memory_xactor_f_rd_data_D_IN =
	     { master_d_RRESP,
	       master_d_RDATA,
	       master_d_RLAST,
	       master_d_RID } ;
  assign memory_xactor_f_rd_data_ENQ =
	     master_d_RVALID && memory_xactor_f_rd_data_FULL_N ;
  assign memory_xactor_f_rd_data_DEQ =
	     CAN_FIRE_RL_handle_memoryRead_response ;
  assign memory_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_addr
  assign memory_xactor_f_wr_addr_D_IN =
	     { riscv_memory_request_get[69:38], 11'd256, x__h2807, 6'd16 } ;
  assign memory_xactor_f_wr_addr_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	     riscv_memory_request_get[5:4] == 2'd1 ;
  assign memory_xactor_f_wr_addr_DEQ =
	     memory_xactor_f_wr_addr_EMPTY_N && master_d_AWREADY ;
  assign memory_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_data
  assign memory_xactor_f_wr_data_D_IN =
	     { w_wdata__h3100, w_wstrb__h3101, 5'd1 } ;
  assign memory_xactor_f_wr_data_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	     riscv_memory_request_get[5:4] == 2'd1 ;
  assign memory_xactor_f_wr_data_DEQ =
	     memory_xactor_f_wr_data_EMPTY_N && master_d_WREADY ;
  assign memory_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_resp
  assign memory_xactor_f_wr_resp_D_IN = { master_d_BRESP, master_d_BID } ;
  assign memory_xactor_f_wr_resp_ENQ =
	     master_d_BVALID && memory_xactor_f_wr_resp_FULL_N ;
  assign memory_xactor_f_wr_resp_DEQ =
	     CAN_FIRE_RL_handle_memoryWrite_response ;
  assign memory_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule riscv
  assign riscv_clint_msip_intrpt = sb_clint_msip_put ;
  assign riscv_clint_mtime_c_mtime = sb_clint_mtime_put ;
  assign riscv_clint_mtip_intrpt = sb_clint_mtip_put ;
  assign riscv_ext_interrupt_intrpt = sb_ext_interrupt_put ;
  assign riscv_inst_response_put =
	     WILL_FIRE_RL_handle_fetch_response ?
	       MUX_riscv_inst_response_put_1__VAL_1 :
	       MUX_riscv_inst_response_put_1__VAL_2 ;
  assign riscv_memory_response_put =
	     WILL_FIRE_RL_handle_memoryRead_response ?
	       MUX_riscv_memory_response_put_1__VAL_1 :
	       MUX_riscv_memory_response_put_1__VAL_2 ;
  assign riscv_EN_inst_request_get = CAN_FIRE_RL_handle_fetch_request ;
  assign riscv_EN_inst_response_put =
	     WILL_FIRE_RL_handle_fetch_response ||
	     WILL_FIRE_RL_handle_inst_access_fault ;
  assign riscv_EN_memory_request_get = CAN_FIRE_RL_handle_memory_request ;
  assign riscv_EN_memory_response_put =
	     WILL_FIRE_RL_handle_memoryRead_response ||
	     WILL_FIRE_RL_handle_memoryWrite_response ;
  assign riscv_EN_clint_msip = EN_sb_clint_msip_put ;
  assign riscv_EN_clint_mtip = EN_sb_clint_mtip_put ;
  assign riscv_EN_clint_mtime = EN_sb_clint_mtime_put ;
  assign riscv_EN_ext_interrupt = EN_sb_ext_interrupt_put ;
  assign riscv_EN_dump_get = EN_io_dump_get ;

  // remaining internal signals
  assign lv_data__h2166 =
	     fetch_xactor_f_rd_data_D_OUT[36:5] >> lv_shift__h2165 ;
  assign lv_shift__h2165 = { ff_inst_request_D_OUT[3:2], 3'd0 } ;
  assign lv_shift__h4656 = { ff_mem_request_D_OUT[39:38], 3'd0 } ;
  assign memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164 =
	     memory_xactor_f_rd_data_D_OUT[36:5] >> lv_shift__h4656 ;
  assign memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q1 =
	     memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164[7:0] ;
  assign memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q2 =
	     memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164[15:0] ;
  assign put_data__h4677 =
	     (memory_xactor_f_rd_data_D_OUT[38:37] == 2'd0) ?
	       CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 :
	       ff_mem_request_D_OUT[69:38] ;
  assign put_data__h5283 =
	     (memory_xactor_f_wr_resp_D_OUT[5:4] == 2'd0) ?
	       32'd0 :
	       ff_mem_request_D_OUT[69:38] ;
  assign put_inst__h2189 =
	     (fetch_xactor_f_rd_data_D_OUT[38:37] == 2'd0) ?
	       lv_data__h2166 :
	       ff_inst_request_D_OUT[33:2] ;
  assign rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 =
	     x_port1__read__h2628 == riscv_memory_request_get[0] ;
  assign value__h2034 = { 2'd0, riscv_mv_curr_priv[1] } ;
  assign w_wstrb__h3101 =
	     (riscv_memory_request_get[3:1] == 3'd3) ?
	       write_strobe__h2618 :
	       write_strobe___1__h4166 ;
  assign write_strobe___1__h4166 =
	     write_strobe__h2618 << riscv_memory_request_get[39:38] ;
  assign x__h2807 = { 1'd0, riscv_memory_request_get[2:1] } ;
  assign x_port1__read__h2628 = rg_wEpoch_port1__read ;
  always@(riscv_memory_request_get)
  begin
    case (riscv_memory_request_get[2:1])
      2'd0: w_wdata__h3100 = {4{riscv_memory_request_get[13:6]}};
      2'd1: w_wdata__h3100 = {2{riscv_memory_request_get[21:6]}};
      default: w_wdata__h3100 = riscv_memory_request_get[37:6];
    endcase
  end
  always@(riscv_memory_request_get)
  begin
    case (riscv_memory_request_get[3:1])
      3'd0: write_strobe__h2618 = 4'b0001;
      3'd1: write_strobe__h2618 = 4'b0011;
      default: write_strobe__h2618 = 4'hF;
    endcase
  end
  always@(ff_mem_request_D_OUT or
	  memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164 or
	  memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q1 or
	  memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q2)
  begin
    case (ff_mem_request_D_OUT[2:1])
      2'd0:
	  CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 =
	      ff_mem_request_D_OUT[3] ?
		{ 24'd0,
		  memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164[7:0] } :
		{ {24{memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q1[7]}},
		  memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q1 };
      2'd1:
	  CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 =
	      ff_mem_request_D_OUT[3] ?
		{ 16'd0,
		  memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164[15:0] } :
		{ {16{memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q2[15]}},
		  memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC__q2 };
      default: CASE_ff_mem_requestD_OUT_BITS_2_TO_1_0_IF_ff__ETC__q3 =
		   memory_xactor_f_rd_data_first__55_BITS_36_TO_5_ETC___d164;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request)
	begin
	  TASK_testplusargs___d17 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request)
	begin
	  TASK_testplusargs___d18 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request)
	begin
	  TASK_testplusargs___d19 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request)
	begin
	  v__h1969 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("[%10d", v__h1969, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("CORE : Fetch Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("AXI4_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("'h%h", riscv_inst_request_get[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("'h%h", value__h2034);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("'h%h", 3'd2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write(", ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("'h%h", 4'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  (TASK_testplusargs___d17 ||
	   TASK_testplusargs___d18 && TASK_testplusargs___d19))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  TASK_testplusargs___d46 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  TASK_testplusargs___d47 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  TASK_testplusargs___d48 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d52 =
	(TASK_testplusargs___d46 ||
	 TASK_testplusargs___d47 && TASK_testplusargs___d48) &&
	fetch_xactor_f_rd_data_D_OUT[38:37] == 2'd0;
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d54 =
	(TASK_testplusargs___d46 ||
	 TASK_testplusargs___d47 && TASK_testplusargs___d48) &&
	fetch_xactor_f_rd_data_D_OUT[38:37] == 2'd1;
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d56 =
	(TASK_testplusargs___d46 ||
	 TASK_testplusargs___d47 && TASK_testplusargs___d48) &&
	fetch_xactor_f_rd_data_D_OUT[38:37] == 2'd2;
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d61 =
	(TASK_testplusargs___d46 ||
	 TASK_testplusargs___d47 && TASK_testplusargs___d48) &&
	fetch_xactor_f_rd_data_D_OUT[38:37] != 2'd0 &&
	fetch_xactor_f_rd_data_D_OUT[38:37] != 2'd1 &&
	fetch_xactor_f_rd_data_D_OUT[38:37] != 2'd2;
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d63 =
	(TASK_testplusargs___d46 ||
	 TASK_testplusargs___d47 && TASK_testplusargs___d48) &&
	fetch_xactor_f_rd_data_D_OUT[4];
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d65 =
	(TASK_testplusargs___d46 ||
	 TASK_testplusargs___d47 && TASK_testplusargs___d48) &&
	!fetch_xactor_f_rd_data_D_OUT[4];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  v__h2350 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write("[%10d", v__h2350, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write("CORE : Fetch Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write("AXI4_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d52)
	$write("AXI4_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d54)
	$write("AXI4_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d56)
	$write("AXI4_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d61)
	$write("AXI4_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write("'h%h", fetch_xactor_f_rd_data_D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d63)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d65)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write(", ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write("'h%h", fetch_xactor_f_rd_data_D_OUT[3:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d46 ||
	   TASK_testplusargs___d47 && TASK_testplusargs___d48))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  TASK_testplusargs___d71 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  TASK_testplusargs___d72 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  TASK_testplusargs___d73 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  v__h2549 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault &&
	  (TASK_testplusargs___d71 ||
	   TASK_testplusargs___d72 && TASK_testplusargs___d73))
	$write("[%10d", v__h2549, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault &&
	  (TASK_testplusargs___d71 ||
	   TASK_testplusargs___d72 && TASK_testplusargs___d73))
	$write("CORE : Fetch Access Fault ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault &&
	  (TASK_testplusargs___d71 ||
	   TASK_testplusargs___d72 && TASK_testplusargs___d73))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  TASK_testplusargs___d118 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  TASK_testplusargs___d119 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  TASK_testplusargs___d120 = $test$plusargs("l0 ");
	  #0;
	end
    riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123 =
	riscv_memory_request_get[5:4] == 2'd1 &&
	(TASK_testplusargs___d118 ||
	 TASK_testplusargs___d119 && TASK_testplusargs___d120);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  v__h4293 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("[%10d", v__h4293, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("CORE : Memory write Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("AXI4_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("'h%h", riscv_memory_request_get[69:38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("'h%h", 3'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("'h%h", x__h2807);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write(", ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("'h%h", 4'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d123)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  TASK_testplusargs___d126 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  TASK_testplusargs___d127 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  TASK_testplusargs___d128 = $test$plusargs("l0 ");
	  #0;
	end
    riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131 =
	riscv_memory_request_get[5:4] == 2'd1 &&
	(TASK_testplusargs___d126 ||
	 TASK_testplusargs___d127 && TASK_testplusargs___d128);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] == 2'd1)
	begin
	  v__h4449 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("[%10d", v__h4449, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("CORE : Memory write Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("'h%h", w_wdata__h3100);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("'h%h", w_wstrb__h3101);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write(", ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("True", " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get_7_BITS_5_TO_4_0_EQ_1__ETC___d131)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] != 2'd1)
	begin
	  TASK_testplusargs___d138 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] != 2'd1)
	begin
	  TASK_testplusargs___d139 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] != 2'd1)
	begin
	  TASK_testplusargs___d140 = $test$plusargs("l0");
	  #0;
	end
    NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143 =
	riscv_memory_request_get[5:4] != 2'd1 &&
	(TASK_testplusargs___d138 ||
	 TASK_testplusargs___d139 && TASK_testplusargs___d140);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  riscv_memory_request_get[5:4] != 2'd1)
	begin
	  v__h2909 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("[%10d", v__h2909, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("CORE : Memory Read Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("AXI4_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("'h%h", riscv_memory_request_get[69:38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("'h%h", 3'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("'h%h", x__h2807);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write(", ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("'h%h", 4'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d89 &&
	  NOT_riscv_memory_request_get_7_BITS_5_TO_4_0_E_ETC___d143)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  TASK_testplusargs___d181 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  TASK_testplusargs___d182 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  TASK_testplusargs___d183 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d187 =
	(TASK_testplusargs___d181 ||
	 TASK_testplusargs___d182 && TASK_testplusargs___d183) &&
	memory_xactor_f_rd_data_D_OUT[38:37] == 2'd0;
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d189 =
	(TASK_testplusargs___d181 ||
	 TASK_testplusargs___d182 && TASK_testplusargs___d183) &&
	memory_xactor_f_rd_data_D_OUT[38:37] == 2'd1;
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d191 =
	(TASK_testplusargs___d181 ||
	 TASK_testplusargs___d182 && TASK_testplusargs___d183) &&
	memory_xactor_f_rd_data_D_OUT[38:37] == 2'd2;
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d198 =
	(TASK_testplusargs___d181 ||
	 TASK_testplusargs___d182 && TASK_testplusargs___d183) &&
	memory_xactor_f_rd_data_D_OUT[4];
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d196 =
	(TASK_testplusargs___d181 ||
	 TASK_testplusargs___d182 && TASK_testplusargs___d183) &&
	memory_xactor_f_rd_data_D_OUT[38:37] != 2'd0 &&
	memory_xactor_f_rd_data_D_OUT[38:37] != 2'd1 &&
	memory_xactor_f_rd_data_D_OUT[38:37] != 2'd2;
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d200 =
	(TASK_testplusargs___d181 ||
	 TASK_testplusargs___d182 && TASK_testplusargs___d183) &&
	!memory_xactor_f_rd_data_D_OUT[4];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  v__h5086 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("[%10d", v__h5086, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("CORE : Memory Read Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("AXI4_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d187)
	$write("AXI4_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d189)
	$write("AXI4_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d191)
	$write("AXI4_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d196)
	$write("AXI4_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("'h%h", memory_xactor_f_rd_data_D_OUT[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d198)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d200)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write(", ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("'h%h", memory_xactor_f_rd_data_D_OUT[3:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  TASK_testplusargs___d212 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  TASK_testplusargs___d213 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  TASK_testplusargs___d214 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d218 =
	(TASK_testplusargs___d212 ||
	 TASK_testplusargs___d213 && TASK_testplusargs___d214) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] == 2'd0;
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d220 =
	(TASK_testplusargs___d212 ||
	 TASK_testplusargs___d213 && TASK_testplusargs___d214) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] == 2'd1;
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d222 =
	(TASK_testplusargs___d212 ||
	 TASK_testplusargs___d213 && TASK_testplusargs___d214) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] == 2'd2;
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d227 =
	(TASK_testplusargs___d212 ||
	 TASK_testplusargs___d213 && TASK_testplusargs___d214) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd0 &&
	memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd1 &&
	memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  v__h5381 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write("[%10d", v__h5381, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write("CORE : Memory Write Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write("AXI4_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d218)
	$write("AXI4_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d220)
	$write("AXI4_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d222)
	$write("AXI4_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d227)
	$write("AXI4_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write(", ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write("'h%h", memory_xactor_f_wr_resp_D_OUT[3:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d212 ||
	   TASK_testplusargs___d213 && TASK_testplusargs___d214))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkeclass

