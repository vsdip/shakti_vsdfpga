//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Fri Apr  4 18:23:40 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTbSoc(CLK,
	       RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire bootrom_dut_read_request_sent_1_whas,
       main_memory_dut_read_request_sent_EN_port1__write,
       main_memory_dut_read_request_sent_port1__read,
       main_memory_dut_read_request_sent_port2__read,
       rg_read_rx_1_whas,
       uart_uart_fifoRecv_r_deq_whas,
       uart_uart_pwRecvCellCountReset_whas,
       uart_uart_pwRecvEnableBitCount_whas,
       uart_uart_pwRecvResetBitCount_whas,
       uart_uart_pwXmitCellCountReset_whas,
       uart_uart_pwXmitEnableBitCount_whas,
       uart_uart_pwXmitLoadBuffer_whas;

  // register bootrom_dut_read_request_sent
  reg bootrom_dut_read_request_sent;
  wire bootrom_dut_read_request_sent_D_IN, bootrom_dut_read_request_sent_EN;

  // register bootrom_dut_rg_req
  reg [3 : 0] bootrom_dut_rg_req;
  wire [3 : 0] bootrom_dut_rg_req_D_IN;
  wire bootrom_dut_rg_req_EN;

  // register bootrom_read_state
  reg bootrom_read_state;
  wire bootrom_read_state_D_IN, bootrom_read_state_EN;

  // register bootrom_rg_rd_id
  reg [3 : 0] bootrom_rg_rd_id;
  wire [3 : 0] bootrom_rg_rd_id_D_IN;
  wire bootrom_rg_rd_id_EN;

  // register bootrom_rg_read_packet
  reg [51 : 0] bootrom_rg_read_packet;
  wire [51 : 0] bootrom_rg_read_packet_D_IN;
  wire bootrom_rg_read_packet_EN;

  // register bootrom_rg_readburst_counter
  reg [7 : 0] bootrom_rg_readburst_counter;
  wire [7 : 0] bootrom_rg_readburst_counter_D_IN;
  wire bootrom_rg_readburst_counter_EN;

  // register bootrom_rg_write_response
  reg [5 : 0] bootrom_rg_write_response;
  wire [5 : 0] bootrom_rg_write_response_D_IN;
  wire bootrom_rg_write_response_EN;

  // register bootrom_write_state
  reg bootrom_write_state;
  wire bootrom_write_state_D_IN, bootrom_write_state_EN;

  // register dump
  reg [31 : 0] dump;
  wire [31 : 0] dump_D_IN;
  wire dump_EN;

  // register dump1
  reg [31 : 0] dump1;
  wire [31 : 0] dump1_D_IN;
  wire dump1_EN;

  // register main_memory_dut_read_request_sent
  reg main_memory_dut_read_request_sent;
  wire main_memory_dut_read_request_sent_D_IN,
       main_memory_dut_read_request_sent_EN;

  // register main_memory_read_state
  reg main_memory_read_state;
  wire main_memory_read_state_D_IN, main_memory_read_state_EN;

  // register main_memory_rg_rd_id
  reg [3 : 0] main_memory_rg_rd_id;
  wire [3 : 0] main_memory_rg_rd_id_D_IN;
  wire main_memory_rg_rd_id_EN;

  // register main_memory_rg_read_packet
  reg [51 : 0] main_memory_rg_read_packet;
  wire [51 : 0] main_memory_rg_read_packet_D_IN;
  wire main_memory_rg_read_packet_EN;

  // register main_memory_rg_readburst_counter
  reg [7 : 0] main_memory_rg_readburst_counter;
  wire [7 : 0] main_memory_rg_readburst_counter_D_IN;
  wire main_memory_rg_readburst_counter_EN;

  // register main_memory_rg_write_packet
  reg [51 : 0] main_memory_rg_write_packet;
  wire [51 : 0] main_memory_rg_write_packet_D_IN;
  wire main_memory_rg_write_packet_EN;

  // register main_memory_write_state
  reg main_memory_write_state;
  wire main_memory_write_state_D_IN, main_memory_write_state_EN;

  // register rg_cnt
  reg [4 : 0] rg_cnt;
  wire [4 : 0] rg_cnt_D_IN;
  wire rg_cnt_EN;

  // register rg_read_rx
  reg rg_read_rx;
  wire rg_read_rx_D_IN, rg_read_rx_EN;

  // register uart_baud_value
  reg [15 : 0] uart_baud_value;
  wire [15 : 0] uart_baud_value_D_IN;
  wire uart_baud_value_EN;

  // register uart_uart_fifoRecv_countReg
  reg [4 : 0] uart_uart_fifoRecv_countReg;
  wire [4 : 0] uart_uart_fifoRecv_countReg_D_IN;
  wire uart_uart_fifoRecv_countReg_EN;

  // register uart_uart_fifoXmit_countReg
  reg [4 : 0] uart_uart_fifoXmit_countReg;
  wire [4 : 0] uart_uart_fifoXmit_countReg_D_IN;
  wire uart_uart_fifoXmit_countReg_EN;

  // register uart_uart_rRecvBitCount
  reg [3 : 0] uart_uart_rRecvBitCount;
  wire [3 : 0] uart_uart_rRecvBitCount_D_IN;
  wire uart_uart_rRecvBitCount_EN;

  // register uart_uart_rRecvCellCount
  reg [3 : 0] uart_uart_rRecvCellCount;
  wire [3 : 0] uart_uart_rRecvCellCount_D_IN;
  wire uart_uart_rRecvCellCount_EN;

  // register uart_uart_rRecvData
  reg uart_uart_rRecvData;
  wire uart_uart_rRecvData_D_IN, uart_uart_rRecvData_EN;

  // register uart_uart_rRecvParity
  reg uart_uart_rRecvParity;
  wire uart_uart_rRecvParity_D_IN, uart_uart_rRecvParity_EN;

  // register uart_uart_rRecvState
  reg [2 : 0] uart_uart_rRecvState;
  reg [2 : 0] uart_uart_rRecvState_D_IN;
  wire uart_uart_rRecvState_EN;

  // register uart_uart_rXmitBitCount
  reg [3 : 0] uart_uart_rXmitBitCount;
  wire [3 : 0] uart_uart_rXmitBitCount_D_IN;
  wire uart_uart_rXmitBitCount_EN;

  // register uart_uart_rXmitCellCount
  reg [3 : 0] uart_uart_rXmitCellCount;
  wire [3 : 0] uart_uart_rXmitCellCount_D_IN;
  wire uart_uart_rXmitCellCount_EN;

  // register uart_uart_rXmitDataOut
  reg uart_uart_rXmitDataOut;
  reg uart_uart_rXmitDataOut_D_IN;
  wire uart_uart_rXmitDataOut_EN;

  // register uart_uart_rXmitParity
  reg uart_uart_rXmitParity;
  wire uart_uart_rXmitParity_D_IN, uart_uart_rXmitParity_EN;

  // register uart_uart_rXmitState
  reg [2 : 0] uart_uart_rXmitState;
  reg [2 : 0] uart_uart_rXmitState_D_IN;
  wire uart_uart_rXmitState_EN;

  // register uart_uart_vrRecvBuffer_0
  reg uart_uart_vrRecvBuffer_0;
  wire uart_uart_vrRecvBuffer_0_D_IN, uart_uart_vrRecvBuffer_0_EN;

  // register uart_uart_vrRecvBuffer_1
  reg uart_uart_vrRecvBuffer_1;
  wire uart_uart_vrRecvBuffer_1_D_IN, uart_uart_vrRecvBuffer_1_EN;

  // register uart_uart_vrRecvBuffer_2
  reg uart_uart_vrRecvBuffer_2;
  wire uart_uart_vrRecvBuffer_2_D_IN, uart_uart_vrRecvBuffer_2_EN;

  // register uart_uart_vrRecvBuffer_3
  reg uart_uart_vrRecvBuffer_3;
  wire uart_uart_vrRecvBuffer_3_D_IN, uart_uart_vrRecvBuffer_3_EN;

  // register uart_uart_vrRecvBuffer_4
  reg uart_uart_vrRecvBuffer_4;
  wire uart_uart_vrRecvBuffer_4_D_IN, uart_uart_vrRecvBuffer_4_EN;

  // register uart_uart_vrRecvBuffer_5
  reg uart_uart_vrRecvBuffer_5;
  wire uart_uart_vrRecvBuffer_5_D_IN, uart_uart_vrRecvBuffer_5_EN;

  // register uart_uart_vrRecvBuffer_6
  reg uart_uart_vrRecvBuffer_6;
  wire uart_uart_vrRecvBuffer_6_D_IN, uart_uart_vrRecvBuffer_6_EN;

  // register uart_uart_vrRecvBuffer_7
  reg uart_uart_vrRecvBuffer_7;
  wire uart_uart_vrRecvBuffer_7_D_IN, uart_uart_vrRecvBuffer_7_EN;

  // register uart_uart_vrXmitBuffer_0
  reg uart_uart_vrXmitBuffer_0;
  wire uart_uart_vrXmitBuffer_0_D_IN, uart_uart_vrXmitBuffer_0_EN;

  // register uart_uart_vrXmitBuffer_1
  reg uart_uart_vrXmitBuffer_1;
  wire uart_uart_vrXmitBuffer_1_D_IN, uart_uart_vrXmitBuffer_1_EN;

  // register uart_uart_vrXmitBuffer_2
  reg uart_uart_vrXmitBuffer_2;
  wire uart_uart_vrXmitBuffer_2_D_IN, uart_uart_vrXmitBuffer_2_EN;

  // register uart_uart_vrXmitBuffer_3
  reg uart_uart_vrXmitBuffer_3;
  wire uart_uart_vrXmitBuffer_3_D_IN, uart_uart_vrXmitBuffer_3_EN;

  // register uart_uart_vrXmitBuffer_4
  reg uart_uart_vrXmitBuffer_4;
  wire uart_uart_vrXmitBuffer_4_D_IN, uart_uart_vrXmitBuffer_4_EN;

  // register uart_uart_vrXmitBuffer_5
  reg uart_uart_vrXmitBuffer_5;
  wire uart_uart_vrXmitBuffer_5_D_IN, uart_uart_vrXmitBuffer_5_EN;

  // register uart_uart_vrXmitBuffer_6
  reg uart_uart_vrXmitBuffer_6;
  wire uart_uart_vrXmitBuffer_6_D_IN, uart_uart_vrXmitBuffer_6_EN;

  // register uart_uart_vrXmitBuffer_7
  reg uart_uart_vrXmitBuffer_7;
  wire uart_uart_vrXmitBuffer_7_D_IN, uart_uart_vrXmitBuffer_7_EN;

  // ports of submodule bootrom_dut_dmemLSB
  wire [31 : 0] bootrom_dut_dmemLSB_DI, bootrom_dut_dmemLSB_DO;
  wire [12 : 0] bootrom_dut_dmemLSB_ADDR;
  wire bootrom_dut_dmemLSB_EN, bootrom_dut_dmemLSB_WE;

  // ports of submodule bootrom_s_xactor_f_rd_addr
  wire [51 : 0] bootrom_s_xactor_f_rd_addr_D_IN,
		bootrom_s_xactor_f_rd_addr_D_OUT;
  wire bootrom_s_xactor_f_rd_addr_CLR,
       bootrom_s_xactor_f_rd_addr_DEQ,
       bootrom_s_xactor_f_rd_addr_EMPTY_N,
       bootrom_s_xactor_f_rd_addr_ENQ,
       bootrom_s_xactor_f_rd_addr_FULL_N;

  // ports of submodule bootrom_s_xactor_f_rd_data
  wire [38 : 0] bootrom_s_xactor_f_rd_data_D_IN,
		bootrom_s_xactor_f_rd_data_D_OUT;
  wire bootrom_s_xactor_f_rd_data_CLR,
       bootrom_s_xactor_f_rd_data_DEQ,
       bootrom_s_xactor_f_rd_data_EMPTY_N,
       bootrom_s_xactor_f_rd_data_ENQ,
       bootrom_s_xactor_f_rd_data_FULL_N;

  // ports of submodule bootrom_s_xactor_f_wr_addr
  wire [51 : 0] bootrom_s_xactor_f_wr_addr_D_IN,
		bootrom_s_xactor_f_wr_addr_D_OUT;
  wire bootrom_s_xactor_f_wr_addr_CLR,
       bootrom_s_xactor_f_wr_addr_DEQ,
       bootrom_s_xactor_f_wr_addr_EMPTY_N,
       bootrom_s_xactor_f_wr_addr_ENQ,
       bootrom_s_xactor_f_wr_addr_FULL_N;

  // ports of submodule bootrom_s_xactor_f_wr_data
  wire [40 : 0] bootrom_s_xactor_f_wr_data_D_IN,
		bootrom_s_xactor_f_wr_data_D_OUT;
  wire bootrom_s_xactor_f_wr_data_CLR,
       bootrom_s_xactor_f_wr_data_DEQ,
       bootrom_s_xactor_f_wr_data_EMPTY_N,
       bootrom_s_xactor_f_wr_data_ENQ,
       bootrom_s_xactor_f_wr_data_FULL_N;

  // ports of submodule bootrom_s_xactor_f_wr_resp
  wire [5 : 0] bootrom_s_xactor_f_wr_resp_D_IN,
	       bootrom_s_xactor_f_wr_resp_D_OUT;
  wire bootrom_s_xactor_f_wr_resp_CLR,
       bootrom_s_xactor_f_wr_resp_DEQ,
       bootrom_s_xactor_f_wr_resp_EMPTY_N,
       bootrom_s_xactor_f_wr_resp_ENQ,
       bootrom_s_xactor_f_wr_resp_FULL_N;

  // ports of submodule main_memory_dut_dmemMSB
  wire [31 : 0] main_memory_dut_dmemMSB_DIA,
		main_memory_dut_dmemMSB_DIB,
		main_memory_dut_dmemMSB_DOA;
  wire [22 : 0] main_memory_dut_dmemMSB_ADDRA, main_memory_dut_dmemMSB_ADDRB;
  wire [3 : 0] main_memory_dut_dmemMSB_WEA, main_memory_dut_dmemMSB_WEB;
  wire main_memory_dut_dmemMSB_ENA, main_memory_dut_dmemMSB_ENB;

  // ports of submodule main_memory_s_xactor_f_rd_addr
  wire [51 : 0] main_memory_s_xactor_f_rd_addr_D_IN,
		main_memory_s_xactor_f_rd_addr_D_OUT;
  wire main_memory_s_xactor_f_rd_addr_CLR,
       main_memory_s_xactor_f_rd_addr_DEQ,
       main_memory_s_xactor_f_rd_addr_EMPTY_N,
       main_memory_s_xactor_f_rd_addr_ENQ,
       main_memory_s_xactor_f_rd_addr_FULL_N;

  // ports of submodule main_memory_s_xactor_f_rd_data
  wire [38 : 0] main_memory_s_xactor_f_rd_data_D_IN,
		main_memory_s_xactor_f_rd_data_D_OUT;
  wire main_memory_s_xactor_f_rd_data_CLR,
       main_memory_s_xactor_f_rd_data_DEQ,
       main_memory_s_xactor_f_rd_data_EMPTY_N,
       main_memory_s_xactor_f_rd_data_ENQ,
       main_memory_s_xactor_f_rd_data_FULL_N;

  // ports of submodule main_memory_s_xactor_f_wr_addr
  wire [51 : 0] main_memory_s_xactor_f_wr_addr_D_IN,
		main_memory_s_xactor_f_wr_addr_D_OUT;
  wire main_memory_s_xactor_f_wr_addr_CLR,
       main_memory_s_xactor_f_wr_addr_DEQ,
       main_memory_s_xactor_f_wr_addr_EMPTY_N,
       main_memory_s_xactor_f_wr_addr_ENQ,
       main_memory_s_xactor_f_wr_addr_FULL_N;

  // ports of submodule main_memory_s_xactor_f_wr_data
  wire [40 : 0] main_memory_s_xactor_f_wr_data_D_IN,
		main_memory_s_xactor_f_wr_data_D_OUT;
  wire main_memory_s_xactor_f_wr_data_CLR,
       main_memory_s_xactor_f_wr_data_DEQ,
       main_memory_s_xactor_f_wr_data_EMPTY_N,
       main_memory_s_xactor_f_wr_data_ENQ,
       main_memory_s_xactor_f_wr_data_FULL_N;

  // ports of submodule main_memory_s_xactor_f_wr_resp
  wire [5 : 0] main_memory_s_xactor_f_wr_resp_D_IN,
	       main_memory_s_xactor_f_wr_resp_D_OUT;
  wire main_memory_s_xactor_f_wr_resp_CLR,
       main_memory_s_xactor_f_wr_resp_DEQ,
       main_memory_s_xactor_f_wr_resp_EMPTY_N,
       main_memory_s_xactor_f_wr_resp_ENQ,
       main_memory_s_xactor_f_wr_resp_FULL_N;

  // ports of submodule soc
  wire [102 : 0] soc_io_dump_get;
  wire [31 : 0] soc_boot_mem_master_ARADDR,
		soc_boot_mem_master_AWADDR,
		soc_boot_mem_master_RDATA,
		soc_boot_mem_master_WDATA,
		soc_main_mem_master_ARADDR,
		soc_main_mem_master_AWADDR,
		soc_main_mem_master_RDATA,
		soc_main_mem_master_WDATA;
  wire [7 : 0] soc_boot_mem_master_ARLEN,
	       soc_boot_mem_master_AWLEN,
	       soc_main_mem_master_ARLEN,
	       soc_main_mem_master_AWLEN;
  wire [3 : 0] soc_boot_mem_master_ARID,
	       soc_boot_mem_master_AWID,
	       soc_boot_mem_master_BID,
	       soc_boot_mem_master_RID,
	       soc_boot_mem_master_WID,
	       soc_boot_mem_master_WSTRB,
	       soc_main_mem_master_ARID,
	       soc_main_mem_master_AWID,
	       soc_main_mem_master_BID,
	       soc_main_mem_master_RID,
	       soc_main_mem_master_WID,
	       soc_main_mem_master_WSTRB;
  wire [2 : 0] soc_boot_mem_master_ARPROT,
	       soc_boot_mem_master_ARSIZE,
	       soc_boot_mem_master_AWPROT,
	       soc_boot_mem_master_AWSIZE,
	       soc_main_mem_master_ARPROT,
	       soc_main_mem_master_ARSIZE,
	       soc_main_mem_master_AWPROT,
	       soc_main_mem_master_AWSIZE;
  wire [1 : 0] soc_boot_mem_master_ARBURST,
	       soc_boot_mem_master_AWBURST,
	       soc_boot_mem_master_BRESP,
	       soc_boot_mem_master_RRESP,
	       soc_main_mem_master_ARBURST,
	       soc_main_mem_master_AWBURST,
	       soc_main_mem_master_BRESP,
	       soc_main_mem_master_RRESP;
  wire soc_EN_io_dump_get,
       soc_RDY_io_dump_get,
       soc_boot_mem_master_ARREADY,
       soc_boot_mem_master_ARVALID,
       soc_boot_mem_master_AWREADY,
       soc_boot_mem_master_AWVALID,
       soc_boot_mem_master_BREADY,
       soc_boot_mem_master_BVALID,
       soc_boot_mem_master_RLAST,
       soc_boot_mem_master_RREADY,
       soc_boot_mem_master_RVALID,
       soc_boot_mem_master_WLAST,
       soc_boot_mem_master_WREADY,
       soc_boot_mem_master_WVALID,
       soc_main_mem_master_ARREADY,
       soc_main_mem_master_ARVALID,
       soc_main_mem_master_AWREADY,
       soc_main_mem_master_AWVALID,
       soc_main_mem_master_BREADY,
       soc_main_mem_master_BVALID,
       soc_main_mem_master_RLAST,
       soc_main_mem_master_RREADY,
       soc_main_mem_master_RVALID,
       soc_main_mem_master_WLAST,
       soc_main_mem_master_WREADY,
       soc_main_mem_master_WVALID,
       soc_mv_end_simulation,
       soc_uart_io_SIN,
       soc_uart_io_SOUT;

  // ports of submodule tck_clk
  wire tck_clk_CLK_IN,
       tck_clk_CLK_IN_EN,
       tck_clk_CLK_OUT,
       tck_clk_COND_IN,
       tck_clk_COND_IN_EN;

  // ports of submodule trst
  wire trst_ASSERT_IN, trst_OUT_RST;

  // ports of submodule uart_uart_baudGen_rBaudCounter
  wire [15 : 0] uart_uart_baudGen_rBaudCounter_DATA_A,
		uart_uart_baudGen_rBaudCounter_DATA_B,
		uart_uart_baudGen_rBaudCounter_DATA_C,
		uart_uart_baudGen_rBaudCounter_DATA_F,
		uart_uart_baudGen_rBaudCounter_Q_OUT;
  wire uart_uart_baudGen_rBaudCounter_ADDA,
       uart_uart_baudGen_rBaudCounter_ADDB,
       uart_uart_baudGen_rBaudCounter_SETC,
       uart_uart_baudGen_rBaudCounter_SETF;

  // ports of submodule uart_uart_baudGen_rBaudTickCounter
  wire [2 : 0] uart_uart_baudGen_rBaudTickCounter_DATA_A,
	       uart_uart_baudGen_rBaudTickCounter_DATA_B,
	       uart_uart_baudGen_rBaudTickCounter_DATA_C,
	       uart_uart_baudGen_rBaudTickCounter_DATA_F,
	       uart_uart_baudGen_rBaudTickCounter_Q_OUT;
  wire uart_uart_baudGen_rBaudTickCounter_ADDA,
       uart_uart_baudGen_rBaudTickCounter_ADDB,
       uart_uart_baudGen_rBaudTickCounter_SETC,
       uart_uart_baudGen_rBaudTickCounter_SETF;

  // ports of submodule uart_uart_fifoRecv
  wire [7 : 0] uart_uart_fifoRecv_D_IN, uart_uart_fifoRecv_D_OUT;
  wire uart_uart_fifoRecv_CLR,
       uart_uart_fifoRecv_DEQ,
       uart_uart_fifoRecv_EMPTY_N,
       uart_uart_fifoRecv_ENQ,
       uart_uart_fifoRecv_FULL_N;

  // ports of submodule uart_uart_fifoXmit
  wire [7 : 0] uart_uart_fifoXmit_D_IN, uart_uart_fifoXmit_D_OUT;
  wire uart_uart_fifoXmit_CLR,
       uart_uart_fifoXmit_DEQ,
       uart_uart_fifoXmit_EMPTY_N,
       uart_uart_fifoXmit_ENQ,
       uart_uart_fifoXmit_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_bootrom_dut_read_request_sent__dreg_update,
       CAN_FIRE_RL_bootrom_read_request_burst,
       CAN_FIRE_RL_bootrom_read_request_first,
       CAN_FIRE_RL_bootrom_read_response,
       CAN_FIRE_RL_bootrom_write_request_address_channel,
       CAN_FIRE_RL_bootrom_write_request_data_channel,
       CAN_FIRE_RL_check_if_character_present,
       CAN_FIRE_RL_connect_uart_in,
       CAN_FIRE_RL_connect_uart_out,
       CAN_FIRE_RL_display_eol,
       CAN_FIRE_RL_end_simulation,
       CAN_FIRE_RL_main_memory_read_request_burst,
       CAN_FIRE_RL_main_memory_read_request_first,
       CAN_FIRE_RL_main_memory_read_response,
       CAN_FIRE_RL_main_memory_write_request_address_channel,
       CAN_FIRE_RL_main_memory_write_request_data_channel,
       CAN_FIRE_RL_open_file_app,
       CAN_FIRE_RL_open_file_rtldump,
       CAN_FIRE_RL_rg_read_rx__dreg_update,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_RL_uart_capture_status,
       CAN_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_uart_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_uart_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_uart_uart_receive_bit_counter,
       CAN_FIRE_RL_uart_uart_receive_buffer_shift,
       CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_uart_uart_receive_parity_bit,
       CAN_FIRE_RL_uart_uart_receive_sample_pin,
       CAN_FIRE_RL_uart_uart_receive_stop_first_bit,
       CAN_FIRE_RL_uart_uart_receive_stop_last_bit,
       CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_uart_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_uart_uart_transmit_bit_counter,
       CAN_FIRE_RL_uart_uart_transmit_buffer_load,
       CAN_FIRE_RL_uart_uart_transmit_buffer_shift,
       CAN_FIRE_RL_uart_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_start_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_uart_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command,
       CAN_FIRE_RL_write_dump_file,
       CAN_FIRE_RL_write_received_character,
       WILL_FIRE_RL_bootrom_dut_read_request_sent__dreg_update,
       WILL_FIRE_RL_bootrom_read_request_burst,
       WILL_FIRE_RL_bootrom_read_request_first,
       WILL_FIRE_RL_bootrom_read_response,
       WILL_FIRE_RL_bootrom_write_request_address_channel,
       WILL_FIRE_RL_bootrom_write_request_data_channel,
       WILL_FIRE_RL_check_if_character_present,
       WILL_FIRE_RL_connect_uart_in,
       WILL_FIRE_RL_connect_uart_out,
       WILL_FIRE_RL_display_eol,
       WILL_FIRE_RL_end_simulation,
       WILL_FIRE_RL_main_memory_read_request_burst,
       WILL_FIRE_RL_main_memory_read_request_first,
       WILL_FIRE_RL_main_memory_read_response,
       WILL_FIRE_RL_main_memory_write_request_address_channel,
       WILL_FIRE_RL_main_memory_write_request_data_channel,
       WILL_FIRE_RL_open_file_app,
       WILL_FIRE_RL_open_file_rtldump,
       WILL_FIRE_RL_rg_read_rx__dreg_update,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_RL_uart_capture_status,
       WILL_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_uart_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_uart_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_uart_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_uart_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_uart_uart_receive_bit_counter,
       WILL_FIRE_RL_uart_uart_receive_buffer_shift,
       WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_uart_uart_receive_parity_bit,
       WILL_FIRE_RL_uart_uart_receive_sample_pin,
       WILL_FIRE_RL_uart_uart_receive_stop_first_bit,
       WILL_FIRE_RL_uart_uart_receive_stop_last_bit,
       WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_uart_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_uart_uart_transmit_bit_counter,
       WILL_FIRE_RL_uart_uart_transmit_buffer_load,
       WILL_FIRE_RL_uart_uart_transmit_buffer_shift,
       WILL_FIRE_RL_uart_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_start_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_uart_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command,
       WILL_FIRE_RL_write_dump_file,
       WILL_FIRE_RL_write_received_character;

  // inputs to muxes for submodule ports
  reg [2 : 0] MUX_uart_uart_rRecvState_write_1__VAL_3;
  wire [51 : 0] MUX_bootrom_rg_read_packet_write_1__VAL_1,
		MUX_main_memory_rg_read_packet_write_1__VAL_1,
		MUX_main_memory_rg_write_packet_write_1__VAL_2;
  wire [7 : 0] MUX_bootrom_rg_readburst_counter_write_1__VAL_1,
	       MUX_main_memory_rg_readburst_counter_write_1__VAL_1;
  wire [5 : 0] MUX_bootrom_s_xactor_f_wr_resp_enq_1__VAL_1,
	       MUX_main_memory_s_xactor_f_wr_resp_enq_1__VAL_1,
	       MUX_main_memory_s_xactor_f_wr_resp_enq_1__VAL_2;
  wire [3 : 0] MUX_bootrom_dut_rg_req_write_1__VAL_1,
	       MUX_bootrom_dut_rg_req_write_1__VAL_2;
  wire [2 : 0] MUX_uart_uart_rRecvState_write_1__VAL_1,
	       MUX_uart_uart_rRecvState_write_1__VAL_2,
	       MUX_uart_uart_rRecvState_write_1__VAL_4,
	       MUX_uart_uart_rXmitState_write_1__VAL_1,
	       MUX_uart_uart_rXmitState_write_1__VAL_2,
	       MUX_uart_uart_rXmitState_write_1__VAL_3,
	       MUX_uart_uart_rXmitState_write_1__VAL_4,
	       MUX_uart_uart_rXmitState_write_1__VAL_5,
	       MUX_uart_uart_rXmitState_write_1__VAL_6,
	       MUX_uart_uart_rXmitState_write_1__VAL_7;
  wire MUX_bootrom_dut_dmemLSB_put_1__SEL_1,
       MUX_bootrom_read_state_write_1__SEL_1,
       MUX_bootrom_s_xactor_f_wr_resp_enq_1__SEL_1,
       MUX_bootrom_s_xactor_f_wr_resp_enq_1__SEL_2,
       MUX_main_memory_dut_dmemMSB_a_put_1__SEL_1,
       MUX_main_memory_read_state_write_1__SEL_1,
       MUX_main_memory_s_xactor_f_wr_resp_enq_1__SEL_1,
       MUX_main_memory_s_xactor_f_wr_resp_enq_1__SEL_2,
       MUX_uart_uart_rRecvState_write_1__SEL_6,
       MUX_uart_uart_rXmitDataOut_write_1__SEL_1,
       MUX_uart_uart_rXmitDataOut_write_1__SEL_2,
       MUX_uart_uart_rXmitDataOut_write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h18750;
  reg TASK_testplusargs___d488;
  reg TASK_testplusargs___d489;
  reg TASK_testplusargs___d490;
  reg [63 : 0] v__h18820;
  reg [31 : 0] TASK_fopen___d497;
  reg TASK_testplusargs___d499;
  reg TASK_testplusargs___d500;
  reg TASK_testplusargs___d501;
  reg [63 : 0] v__h19085;
  reg [31 : 0] TASK_fopen___d506;
  reg TASK_testplusargs___d508;
  reg TASK_testplusargs___d509;
  reg TASK_testplusargs___d510;
  reg [63 : 0] v__h19496;
  reg TASK_testplusargs___d180;
  reg TASK_testplusargs___d181;
  reg TASK_testplusargs___d182;
  reg [63 : 0] v__h13389;
  reg TASK_testplusargs___d216;
  reg TASK_testplusargs___d217;
  reg TASK_testplusargs___d218;
  reg [63 : 0] v__h13849;
  reg TASK_testplusargs___d289;
  reg TASK_testplusargs___d290;
  reg TASK_testplusargs___d291;
  reg [63 : 0] v__h14957;
  reg TASK_testplusargs___d234;
  reg TASK_testplusargs___d235;
  reg TASK_testplusargs___d236;
  reg [63 : 0] v__h14200;
  reg TASK_testplusargs___d279;
  reg TASK_testplusargs___d280;
  reg TASK_testplusargs___d281;
  reg [63 : 0] v__h14780;
  reg TASK_testplusargs___d384;
  reg TASK_testplusargs___d385;
  reg TASK_testplusargs___d386;
  reg [63 : 0] v__h17714;
  reg TASK_testplusargs___d329;
  reg TASK_testplusargs___d330;
  reg TASK_testplusargs___d331;
  reg [63 : 0] v__h16937;
  reg TASK_testplusargs___d374;
  reg TASK_testplusargs___d375;
  reg TASK_testplusargs___d376;
  reg [63 : 0] v__h17588;
  reg NOT_main_memory_rg_readburst_counter_48_EQ_mai_ETC___d284;
  reg NOT_bootrom_rg_readburst_counter_40_EQ_bootrom_ETC___d379;
  reg TASK_fopen_97_EQ_0_98_AND_TASK_testplusargs_99_ETC___d504;
  reg TASK_fopen_06_EQ_0_07_AND_TASK_testplusargs_08_ETC___d513;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] addr__h13604, address__h14451, address__h17175;
  reg [2 : 0] CASE_bootrom_rg_read_packet_BITS_13_TO_6_3_2_7_ETC__q3,
	      CASE_main_memory_rg_read_packet_BITS_13_TO_6_3_ETC__q2,
	      CASE_main_memory_rg_write_packet_BITS_16_TO_9__ETC__q1;
  wire [31 : 0] addr3604_MINUS_0x80000000__q9,
		address4451_MINUS_0x80000000__q6,
		address7175_MINUS_0x1000__q4,
		bootrom_s_xactor_f_rd_addrD_OUT_BITS_51_TO_20_ETC__q5,
		data__h20549,
		main_memory_s_xactor_f_rd_addrD_OUT_BITS_51_T_ETC__q7,
		main_memory_s_xactor_f_wr_addrD_OUT_BITS_51_T_ETC__q8,
		mask__h13657,
		mask__h14501,
		mask__h17225,
		new_address__h13655,
		new_address__h14499,
		new_address__h17223,
		temp1__h13658,
		temp1__h14502,
		temp1__h17226,
		temp2__h13659,
		temp2__h14503,
		temp2__h17227,
		y__h13781,
		y__h14601,
		y__h17325;
  wire [3 : 0] x__h3702, x__h5406, x__h7162, x__h7188, x_wget__h11547;
  wire [2 : 0] x__h13722, x__h14542, x__h17266;
  wire _dor2uart_uart_pwXmitCellCountReset_EN_wset,
       bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343,
       main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251,
       rg_cnt_95_ULT_5___d496,
       uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30,
       z__h8645,
       z__h8652,
       z__h8659,
       z__h8666,
       z__h8673,
       z__h8680;

  // submodule bootrom_dut_dmemLSB
  BRAM1Load #(.FILENAME("boot.LSB"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd13),
	      .DATA_WIDTH(32'd32),
	      .MEMSIZE(14'd8192),
	      .BINARY(1'd0)) bootrom_dut_dmemLSB(.CLK(CLK),
						 .ADDR(bootrom_dut_dmemLSB_ADDR),
						 .DI(bootrom_dut_dmemLSB_DI),
						 .WE(bootrom_dut_dmemLSB_WE),
						 .EN(bootrom_dut_dmemLSB_EN),
						 .DO(bootrom_dut_dmemLSB_DO));

  // submodule bootrom_s_xactor_f_rd_addr
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) bootrom_s_xactor_f_rd_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(bootrom_s_xactor_f_rd_addr_D_IN),
						     .ENQ(bootrom_s_xactor_f_rd_addr_ENQ),
						     .DEQ(bootrom_s_xactor_f_rd_addr_DEQ),
						     .CLR(bootrom_s_xactor_f_rd_addr_CLR),
						     .D_OUT(bootrom_s_xactor_f_rd_addr_D_OUT),
						     .FULL_N(bootrom_s_xactor_f_rd_addr_FULL_N),
						     .EMPTY_N(bootrom_s_xactor_f_rd_addr_EMPTY_N));

  // submodule bootrom_s_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) bootrom_s_xactor_f_rd_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(bootrom_s_xactor_f_rd_data_D_IN),
						     .ENQ(bootrom_s_xactor_f_rd_data_ENQ),
						     .DEQ(bootrom_s_xactor_f_rd_data_DEQ),
						     .CLR(bootrom_s_xactor_f_rd_data_CLR),
						     .D_OUT(bootrom_s_xactor_f_rd_data_D_OUT),
						     .FULL_N(bootrom_s_xactor_f_rd_data_FULL_N),
						     .EMPTY_N(bootrom_s_xactor_f_rd_data_EMPTY_N));

  // submodule bootrom_s_xactor_f_wr_addr
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) bootrom_s_xactor_f_wr_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(bootrom_s_xactor_f_wr_addr_D_IN),
						     .ENQ(bootrom_s_xactor_f_wr_addr_ENQ),
						     .DEQ(bootrom_s_xactor_f_wr_addr_DEQ),
						     .CLR(bootrom_s_xactor_f_wr_addr_CLR),
						     .D_OUT(bootrom_s_xactor_f_wr_addr_D_OUT),
						     .FULL_N(bootrom_s_xactor_f_wr_addr_FULL_N),
						     .EMPTY_N(bootrom_s_xactor_f_wr_addr_EMPTY_N));

  // submodule bootrom_s_xactor_f_wr_data
  FIFO2 #(.width(32'd41),
	  .guarded(1'd1)) bootrom_s_xactor_f_wr_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(bootrom_s_xactor_f_wr_data_D_IN),
						     .ENQ(bootrom_s_xactor_f_wr_data_ENQ),
						     .DEQ(bootrom_s_xactor_f_wr_data_DEQ),
						     .CLR(bootrom_s_xactor_f_wr_data_CLR),
						     .D_OUT(bootrom_s_xactor_f_wr_data_D_OUT),
						     .FULL_N(bootrom_s_xactor_f_wr_data_FULL_N),
						     .EMPTY_N(bootrom_s_xactor_f_wr_data_EMPTY_N));

  // submodule bootrom_s_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) bootrom_s_xactor_f_wr_resp(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(bootrom_s_xactor_f_wr_resp_D_IN),
						     .ENQ(bootrom_s_xactor_f_wr_resp_ENQ),
						     .DEQ(bootrom_s_xactor_f_wr_resp_DEQ),
						     .CLR(bootrom_s_xactor_f_wr_resp_CLR),
						     .D_OUT(bootrom_s_xactor_f_wr_resp_D_OUT),
						     .FULL_N(bootrom_s_xactor_f_wr_resp_FULL_N),
						     .EMPTY_N(bootrom_s_xactor_f_wr_resp_EMPTY_N));

  // submodule main_memory_dut_dmemMSB
  BRAM2BELoad #(.FILENAME("code.mem"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd23),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(24'd8388608),
		.BINARY(1'd0)) main_memory_dut_dmemMSB(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(main_memory_dut_dmemMSB_ADDRA),
						       .ADDRB(main_memory_dut_dmemMSB_ADDRB),
						       .DIA(main_memory_dut_dmemMSB_DIA),
						       .DIB(main_memory_dut_dmemMSB_DIB),
						       .WEA(main_memory_dut_dmemMSB_WEA),
						       .WEB(main_memory_dut_dmemMSB_WEB),
						       .ENA(main_memory_dut_dmemMSB_ENA),
						       .ENB(main_memory_dut_dmemMSB_ENB),
						       .DOA(main_memory_dut_dmemMSB_DOA),
						       .DOB());

  // submodule main_memory_s_xactor_f_rd_addr
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) main_memory_s_xactor_f_rd_addr(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(main_memory_s_xactor_f_rd_addr_D_IN),
							 .ENQ(main_memory_s_xactor_f_rd_addr_ENQ),
							 .DEQ(main_memory_s_xactor_f_rd_addr_DEQ),
							 .CLR(main_memory_s_xactor_f_rd_addr_CLR),
							 .D_OUT(main_memory_s_xactor_f_rd_addr_D_OUT),
							 .FULL_N(main_memory_s_xactor_f_rd_addr_FULL_N),
							 .EMPTY_N(main_memory_s_xactor_f_rd_addr_EMPTY_N));

  // submodule main_memory_s_xactor_f_rd_data
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) main_memory_s_xactor_f_rd_data(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(main_memory_s_xactor_f_rd_data_D_IN),
							 .ENQ(main_memory_s_xactor_f_rd_data_ENQ),
							 .DEQ(main_memory_s_xactor_f_rd_data_DEQ),
							 .CLR(main_memory_s_xactor_f_rd_data_CLR),
							 .D_OUT(main_memory_s_xactor_f_rd_data_D_OUT),
							 .FULL_N(main_memory_s_xactor_f_rd_data_FULL_N),
							 .EMPTY_N(main_memory_s_xactor_f_rd_data_EMPTY_N));

  // submodule main_memory_s_xactor_f_wr_addr
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) main_memory_s_xactor_f_wr_addr(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(main_memory_s_xactor_f_wr_addr_D_IN),
							 .ENQ(main_memory_s_xactor_f_wr_addr_ENQ),
							 .DEQ(main_memory_s_xactor_f_wr_addr_DEQ),
							 .CLR(main_memory_s_xactor_f_wr_addr_CLR),
							 .D_OUT(main_memory_s_xactor_f_wr_addr_D_OUT),
							 .FULL_N(main_memory_s_xactor_f_wr_addr_FULL_N),
							 .EMPTY_N(main_memory_s_xactor_f_wr_addr_EMPTY_N));

  // submodule main_memory_s_xactor_f_wr_data
  FIFO2 #(.width(32'd41),
	  .guarded(1'd1)) main_memory_s_xactor_f_wr_data(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(main_memory_s_xactor_f_wr_data_D_IN),
							 .ENQ(main_memory_s_xactor_f_wr_data_ENQ),
							 .DEQ(main_memory_s_xactor_f_wr_data_DEQ),
							 .CLR(main_memory_s_xactor_f_wr_data_CLR),
							 .D_OUT(main_memory_s_xactor_f_wr_data_D_OUT),
							 .FULL_N(main_memory_s_xactor_f_wr_data_FULL_N),
							 .EMPTY_N(main_memory_s_xactor_f_wr_data_EMPTY_N));

  // submodule main_memory_s_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) main_memory_s_xactor_f_wr_resp(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(main_memory_s_xactor_f_wr_resp_D_IN),
							 .ENQ(main_memory_s_xactor_f_wr_resp_ENQ),
							 .DEQ(main_memory_s_xactor_f_wr_resp_DEQ),
							 .CLR(main_memory_s_xactor_f_wr_resp_CLR),
							 .D_OUT(main_memory_s_xactor_f_wr_resp_D_OUT),
							 .FULL_N(main_memory_s_xactor_f_wr_resp_FULL_N),
							 .EMPTY_N(main_memory_s_xactor_f_wr_resp_EMPTY_N));

  // submodule soc
  mkSoc soc(.CLK_tck_clk(tck_clk_CLK_OUT),
	    .RST_N_trst(trst_OUT_RST),
	    .CLK(CLK),
	    .RST_N(RST_N),
	    .boot_mem_master_ARREADY(soc_boot_mem_master_ARREADY),
	    .boot_mem_master_AWREADY(soc_boot_mem_master_AWREADY),
	    .boot_mem_master_BID(soc_boot_mem_master_BID),
	    .boot_mem_master_BRESP(soc_boot_mem_master_BRESP),
	    .boot_mem_master_BVALID(soc_boot_mem_master_BVALID),
	    .boot_mem_master_RDATA(soc_boot_mem_master_RDATA),
	    .boot_mem_master_RID(soc_boot_mem_master_RID),
	    .boot_mem_master_RLAST(soc_boot_mem_master_RLAST),
	    .boot_mem_master_RRESP(soc_boot_mem_master_RRESP),
	    .boot_mem_master_RVALID(soc_boot_mem_master_RVALID),
	    .boot_mem_master_WREADY(soc_boot_mem_master_WREADY),
	    .main_mem_master_ARREADY(soc_main_mem_master_ARREADY),
	    .main_mem_master_AWREADY(soc_main_mem_master_AWREADY),
	    .main_mem_master_BID(soc_main_mem_master_BID),
	    .main_mem_master_BRESP(soc_main_mem_master_BRESP),
	    .main_mem_master_BVALID(soc_main_mem_master_BVALID),
	    .main_mem_master_RDATA(soc_main_mem_master_RDATA),
	    .main_mem_master_RID(soc_main_mem_master_RID),
	    .main_mem_master_RLAST(soc_main_mem_master_RLAST),
	    .main_mem_master_RRESP(soc_main_mem_master_RRESP),
	    .main_mem_master_RVALID(soc_main_mem_master_RVALID),
	    .main_mem_master_WREADY(soc_main_mem_master_WREADY),
	    .uart_io_SIN(soc_uart_io_SIN),
	    .EN_io_dump_get(soc_EN_io_dump_get),
	    .io_dump_get(soc_io_dump_get),
	    .RDY_io_dump_get(soc_RDY_io_dump_get),
	    .main_mem_master_AWVALID(soc_main_mem_master_AWVALID),
	    .main_mem_master_AWADDR(soc_main_mem_master_AWADDR),
	    .main_mem_master_AWPROT(soc_main_mem_master_AWPROT),
	    .main_mem_master_AWLEN(soc_main_mem_master_AWLEN),
	    .main_mem_master_AWSIZE(soc_main_mem_master_AWSIZE),
	    .main_mem_master_AWBURST(soc_main_mem_master_AWBURST),
	    .main_mem_master_AWID(soc_main_mem_master_AWID),
	    .main_mem_master_WVALID(soc_main_mem_master_WVALID),
	    .main_mem_master_WDATA(soc_main_mem_master_WDATA),
	    .main_mem_master_WSTRB(soc_main_mem_master_WSTRB),
	    .main_mem_master_WLAST(soc_main_mem_master_WLAST),
	    .main_mem_master_WID(soc_main_mem_master_WID),
	    .main_mem_master_BREADY(soc_main_mem_master_BREADY),
	    .main_mem_master_ARVALID(soc_main_mem_master_ARVALID),
	    .main_mem_master_ARADDR(soc_main_mem_master_ARADDR),
	    .main_mem_master_ARPROT(soc_main_mem_master_ARPROT),
	    .main_mem_master_ARLEN(soc_main_mem_master_ARLEN),
	    .main_mem_master_ARSIZE(soc_main_mem_master_ARSIZE),
	    .main_mem_master_ARBURST(soc_main_mem_master_ARBURST),
	    .main_mem_master_ARID(soc_main_mem_master_ARID),
	    .main_mem_master_RREADY(soc_main_mem_master_RREADY),
	    .boot_mem_master_AWVALID(soc_boot_mem_master_AWVALID),
	    .boot_mem_master_AWADDR(soc_boot_mem_master_AWADDR),
	    .boot_mem_master_AWPROT(soc_boot_mem_master_AWPROT),
	    .boot_mem_master_AWLEN(soc_boot_mem_master_AWLEN),
	    .boot_mem_master_AWSIZE(soc_boot_mem_master_AWSIZE),
	    .boot_mem_master_AWBURST(soc_boot_mem_master_AWBURST),
	    .boot_mem_master_AWID(soc_boot_mem_master_AWID),
	    .boot_mem_master_WVALID(soc_boot_mem_master_WVALID),
	    .boot_mem_master_WDATA(soc_boot_mem_master_WDATA),
	    .boot_mem_master_WSTRB(soc_boot_mem_master_WSTRB),
	    .boot_mem_master_WLAST(soc_boot_mem_master_WLAST),
	    .boot_mem_master_WID(soc_boot_mem_master_WID),
	    .boot_mem_master_BREADY(soc_boot_mem_master_BREADY),
	    .boot_mem_master_ARVALID(soc_boot_mem_master_ARVALID),
	    .boot_mem_master_ARADDR(soc_boot_mem_master_ARADDR),
	    .boot_mem_master_ARPROT(soc_boot_mem_master_ARPROT),
	    .boot_mem_master_ARLEN(soc_boot_mem_master_ARLEN),
	    .boot_mem_master_ARSIZE(soc_boot_mem_master_ARSIZE),
	    .boot_mem_master_ARBURST(soc_boot_mem_master_ARBURST),
	    .boot_mem_master_ARID(soc_boot_mem_master_ARID),
	    .boot_mem_master_RREADY(soc_boot_mem_master_RREADY),
	    .uart_io_SOUT(soc_uart_io_SOUT),
	    .mv_end_simulation(soc_mv_end_simulation),
	    .RDY_mv_end_simulation());

  // submodule tck_clk
  MakeClock #(.initVal(1'd1), .initGate(1'd1)) tck_clk(.CLK(CLK),
						       .RST(RST_N),
						       .CLK_IN(tck_clk_CLK_IN),
						       .COND_IN(tck_clk_COND_IN),
						       .CLK_IN_EN(tck_clk_CLK_IN_EN),
						       .COND_IN_EN(tck_clk_COND_IN_EN),
						       .CLK_VAL_OUT(),
						       .COND_OUT(),
						       .CLK_GATE_OUT(),
						       .CLK_OUT(tck_clk_CLK_OUT));

  // submodule trst
  MakeReset0 #(.init(1'd1)) trst(.CLK(CLK),
				 .RST(RST_N),
				 .ASSERT_IN(trst_ASSERT_IN),
				 .ASSERT_OUT(),
				 .OUT_RST(trst_OUT_RST));

  // submodule uart_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) uart_uart_baudGen_rBaudCounter(.CLK(CLK),
							 .RST(RST_N),
							 .DATA_A(uart_uart_baudGen_rBaudCounter_DATA_A),
							 .DATA_B(uart_uart_baudGen_rBaudCounter_DATA_B),
							 .DATA_C(uart_uart_baudGen_rBaudCounter_DATA_C),
							 .DATA_F(uart_uart_baudGen_rBaudCounter_DATA_F),
							 .ADDA(uart_uart_baudGen_rBaudCounter_ADDA),
							 .ADDB(uart_uart_baudGen_rBaudCounter_ADDB),
							 .SETC(uart_uart_baudGen_rBaudCounter_SETC),
							 .SETF(uart_uart_baudGen_rBaudCounter_SETF),
							 .Q_OUT(uart_uart_baudGen_rBaudCounter_Q_OUT));

  // submodule uart_uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) uart_uart_baudGen_rBaudTickCounter(.CLK(CLK),
							    .RST(RST_N),
							    .DATA_A(uart_uart_baudGen_rBaudTickCounter_DATA_A),
							    .DATA_B(uart_uart_baudGen_rBaudTickCounter_DATA_B),
							    .DATA_C(uart_uart_baudGen_rBaudTickCounter_DATA_C),
							    .DATA_F(uart_uart_baudGen_rBaudTickCounter_DATA_F),
							    .ADDA(uart_uart_baudGen_rBaudTickCounter_ADDA),
							    .ADDB(uart_uart_baudGen_rBaudTickCounter_ADDB),
							    .SETC(uart_uart_baudGen_rBaudTickCounter_SETC),
							    .SETF(uart_uart_baudGen_rBaudTickCounter_SETF),
							    .Q_OUT(uart_uart_baudGen_rBaudTickCounter_Q_OUT));

  // submodule uart_uart_fifoRecv
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_uart_fifoRecv(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(uart_uart_fifoRecv_D_IN),
						 .ENQ(uart_uart_fifoRecv_ENQ),
						 .DEQ(uart_uart_fifoRecv_DEQ),
						 .CLR(uart_uart_fifoRecv_CLR),
						 .D_OUT(uart_uart_fifoRecv_D_OUT),
						 .FULL_N(uart_uart_fifoRecv_FULL_N),
						 .EMPTY_N(uart_uart_fifoRecv_EMPTY_N));

  // submodule uart_uart_fifoXmit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_uart_fifoXmit(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(uart_uart_fifoXmit_D_IN),
						 .ENQ(uart_uart_fifoXmit_ENQ),
						 .DEQ(uart_uart_fifoXmit_DEQ),
						 .CLR(uart_uart_fifoXmit_CLR),
						 .D_OUT(uart_uart_fifoXmit_D_OUT),
						 .FULL_N(uart_uart_fifoXmit_FULL_N),
						 .EMPTY_N(uart_uart_fifoXmit_EMPTY_N));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_display_eol
  assign CAN_FIRE_RL_display_eol = 1'd1 ;
  assign WILL_FIRE_RL_display_eol = 1'd1 ;

  // rule RL_open_file_rtldump
  assign CAN_FIRE_RL_open_file_rtldump = rg_cnt_95_ULT_5___d496 ;
  assign WILL_FIRE_RL_open_file_rtldump = rg_cnt_95_ULT_5___d496 ;

  // rule RL_open_file_app
  assign CAN_FIRE_RL_open_file_app = rg_cnt_95_ULT_5___d496 ;
  assign WILL_FIRE_RL_open_file_app = rg_cnt_95_ULT_5___d496 ;

  // rule RL_connect_uart_out
  assign CAN_FIRE_RL_connect_uart_out = 1'd1 ;
  assign WILL_FIRE_RL_connect_uart_out = 1'd1 ;

  // rule RL_end_simulation
  assign CAN_FIRE_RL_end_simulation = soc_mv_end_simulation ;
  assign WILL_FIRE_RL_end_simulation = soc_mv_end_simulation ;

  // rule RL_write_dump_file
  assign CAN_FIRE_RL_write_dump_file =
	     soc_RDY_io_dump_get && !rg_cnt_95_ULT_5___d496 ;
  assign WILL_FIRE_RL_write_dump_file = CAN_FIRE_RL_write_dump_file ;

  // rule RL_uart_capture_status
  assign CAN_FIRE_RL_uart_capture_status = 1'd1 ;
  assign WILL_FIRE_RL_uart_capture_status = 1'd1 ;

  // rule RL_check_if_character_present
  assign CAN_FIRE_RL_check_if_character_present = !rg_read_rx ;
  assign WILL_FIRE_RL_check_if_character_present =
	     CAN_FIRE_RL_check_if_character_present ;

  // rule RL_write_received_character
  assign CAN_FIRE_RL_write_received_character =
	     !rg_cnt_95_ULT_5___d496 && rg_read_rx ;
  assign WILL_FIRE_RL_write_received_character =
	     CAN_FIRE_RL_write_received_character ;

  // rule RL_uart_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_uart_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_uart_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_uart_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_uart_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit =
	     uart_uart_rRecvState == 3'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit ;

  // rule RL_uart_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell =
	     uart_uart_rRecvState == 3'd1 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell ;

  // rule RL_uart_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample =
	     uart_uart_rRecvState == 3'd2 &&
	     uart_uart_rRecvCellCount == 4'hF &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_uart_uart_receive_sample_pin
  assign CAN_FIRE_RL_uart_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_uart_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // rule RL_uart_uart_receive_parity_bit
  assign CAN_FIRE_RL_uart_uart_receive_parity_bit =
	     uart_uart_rRecvState == 3'd4 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_parity_bit =
	     CAN_FIRE_RL_uart_uart_receive_parity_bit ;

  // rule RL_uart_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_uart_uart_receive_stop_first_bit =
	     uart_uart_rRecvState == 3'd5 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_uart_uart_receive_stop_first_bit ;

  // rule RL_uart_uart_receive_bit_counter
  assign CAN_FIRE_RL_uart_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_receive_bit_counter = 1'd1 ;

  // rule RL_uart_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_uart_uart_receive_stop_last_bit =
	     uart_uart_rRecvState == 3'd6 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_uart_uart_receive_stop_last_bit ;

  // rule RL_uart_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_uart_receive_buffer_shift
  assign CAN_FIRE_RL_uart_uart_receive_buffer_shift =
	     uart_uart_rRecvState == 3'd3 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_buffer_shift =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // rule RL_connect_uart_in
  assign CAN_FIRE_RL_connect_uart_in = 1'd1 ;
  assign WILL_FIRE_RL_connect_uart_in = 1'd1 ;

  // rule RL_uart_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command =
	     uart_uart_rXmitState == 3'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command ;

  // rule RL_uart_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_start_bit =
	     uart_uart_rXmitState == 3'd1 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_start_bit ;

  // rule RL_uart_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time =
	     uart_uart_rXmitState == 3'd2 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_uart_uart_transmit_bit_counter
  assign CAN_FIRE_RL_uart_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_uart_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_uart_uart_transmit_shift_next_bit =
	     uart_uart_rXmitState == 3'd3 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_uart_uart_transmit_shift_next_bit ;

  // rule RL_uart_uart_transmit_buffer_load
  assign CAN_FIRE_RL_uart_uart_transmit_buffer_load =
	     uart_uart_fifoXmit_EMPTY_N && uart_uart_pwXmitLoadBuffer_whas ;
  assign WILL_FIRE_RL_uart_uart_transmit_buffer_load =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_load ;

  // rule RL_uart_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_uart_uart_transmit_buffer_shift =
	     !uart_uart_pwXmitLoadBuffer_whas &&
	     CAN_FIRE_RL_uart_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_uart_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // rule RL_uart_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_parity_bit =
	     uart_uart_rXmitState == 3'd7 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_parity_bit ;

  // rule RL_uart_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit =
	     uart_uart_rXmitState == 3'd4 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit ;

  // rule RL_uart_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 =
	     uart_uart_rXmitState == 3'd5 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ;

  // rule RL_uart_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2 =
	     uart_uart_rXmitState == 3'd6 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2 ;

  // rule RL_uart_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_uart_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick =
	     uart_uart_baudGen_rBaudTickCounter_Q_OUT == 3'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_uart_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x =
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_uart_receive_stop_last_bit !=
	     uart_uart_fifoRecv_r_deq_whas ;
  assign WILL_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter ;

  // rule RL_uart_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter =
	     1'b0 != CAN_FIRE_RL_uart_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter ;

  // rule RL_rg_read_rx__dreg_update
  assign CAN_FIRE_RL_rg_read_rx__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_read_rx__dreg_update = 1'd1 ;

  // rule RL_main_memory_write_request_address_channel
  assign CAN_FIRE_RL_main_memory_write_request_address_channel =
	     main_memory_s_xactor_f_wr_addr_EMPTY_N &&
	     main_memory_s_xactor_f_wr_data_EMPTY_N &&
	     main_memory_s_xactor_f_wr_resp_FULL_N &&
	     !main_memory_write_state ;
  assign WILL_FIRE_RL_main_memory_write_request_address_channel =
	     CAN_FIRE_RL_main_memory_write_request_address_channel ;

  // rule RL_main_memory_write_request_data_channel
  assign CAN_FIRE_RL_main_memory_write_request_data_channel =
	     main_memory_s_xactor_f_wr_data_EMPTY_N &&
	     main_memory_s_xactor_f_wr_resp_FULL_N &&
	     main_memory_write_state ;
  assign WILL_FIRE_RL_main_memory_write_request_data_channel =
	     CAN_FIRE_RL_main_memory_write_request_data_channel ;

  // rule RL_main_memory_read_response
  assign CAN_FIRE_RL_main_memory_read_response =
	     main_memory_dut_read_request_sent &&
	     main_memory_s_xactor_f_rd_data_FULL_N ;
  assign WILL_FIRE_RL_main_memory_read_response =
	     CAN_FIRE_RL_main_memory_read_response ;

  // rule RL_main_memory_read_request_first
  assign CAN_FIRE_RL_main_memory_read_request_first =
	     main_memory_s_xactor_f_rd_addr_EMPTY_N &&
	     !main_memory_read_state ;
  assign WILL_FIRE_RL_main_memory_read_request_first =
	     CAN_FIRE_RL_main_memory_read_request_first ;

  // rule RL_main_memory_read_request_burst
  assign CAN_FIRE_RL_main_memory_read_request_burst =
	     CAN_FIRE_RL_main_memory_read_response && main_memory_read_state ;
  assign WILL_FIRE_RL_main_memory_read_request_burst =
	     CAN_FIRE_RL_main_memory_read_request_burst ;

  // rule RL_bootrom_write_request_address_channel
  assign CAN_FIRE_RL_bootrom_write_request_address_channel =
	     bootrom_s_xactor_f_wr_addr_EMPTY_N &&
	     bootrom_s_xactor_f_wr_data_EMPTY_N &&
	     bootrom_s_xactor_f_wr_resp_FULL_N &&
	     !bootrom_write_state ;
  assign WILL_FIRE_RL_bootrom_write_request_address_channel =
	     CAN_FIRE_RL_bootrom_write_request_address_channel ;

  // rule RL_bootrom_write_request_data_channel
  assign CAN_FIRE_RL_bootrom_write_request_data_channel =
	     bootrom_s_xactor_f_wr_data_EMPTY_N &&
	     bootrom_s_xactor_f_wr_resp_FULL_N &&
	     bootrom_write_state ;
  assign WILL_FIRE_RL_bootrom_write_request_data_channel =
	     CAN_FIRE_RL_bootrom_write_request_data_channel ;

  // rule RL_bootrom_read_response
  assign CAN_FIRE_RL_bootrom_read_response =
	     bootrom_dut_read_request_sent &&
	     bootrom_s_xactor_f_rd_data_FULL_N ;
  assign WILL_FIRE_RL_bootrom_read_response =
	     CAN_FIRE_RL_bootrom_read_response ;

  // rule RL_bootrom_read_request_first
  assign CAN_FIRE_RL_bootrom_read_request_first =
	     bootrom_s_xactor_f_rd_addr_EMPTY_N && !bootrom_read_state ;
  assign WILL_FIRE_RL_bootrom_read_request_first =
	     CAN_FIRE_RL_bootrom_read_request_first ;

  // rule RL_bootrom_read_request_burst
  assign CAN_FIRE_RL_bootrom_read_request_burst = bootrom_read_state ;
  assign WILL_FIRE_RL_bootrom_read_request_burst = bootrom_read_state ;

  // rule RL_bootrom_dut_read_request_sent__dreg_update
  assign CAN_FIRE_RL_bootrom_dut_read_request_sent__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_bootrom_dut_read_request_sent__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_bootrom_dut_dmemLSB_put_1__SEL_1 =
	     bootrom_read_state &&
	     !bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343 ;
  assign MUX_bootrom_read_state_write_1__SEL_1 =
	     bootrom_read_state &&
	     bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343 ;
  assign MUX_bootrom_s_xactor_f_wr_resp_enq_1__SEL_1 =
	     WILL_FIRE_RL_bootrom_write_request_address_channel &&
	     bootrom_s_xactor_f_wr_data_D_OUT[0] ;
  assign MUX_bootrom_s_xactor_f_wr_resp_enq_1__SEL_2 =
	     WILL_FIRE_RL_bootrom_write_request_data_channel &&
	     bootrom_s_xactor_f_wr_data_D_OUT[0] ;
  assign MUX_main_memory_dut_dmemMSB_a_put_1__SEL_1 =
	     WILL_FIRE_RL_main_memory_read_request_burst &&
	     !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 ;
  assign MUX_main_memory_read_state_write_1__SEL_1 =
	     WILL_FIRE_RL_main_memory_read_request_burst &&
	     main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 ;
  assign MUX_main_memory_s_xactor_f_wr_resp_enq_1__SEL_1 =
	     WILL_FIRE_RL_main_memory_write_request_address_channel &&
	     main_memory_s_xactor_f_wr_data_D_OUT[0] ;
  assign MUX_main_memory_s_xactor_f_wr_resp_enq_1__SEL_2 =
	     WILL_FIRE_RL_main_memory_write_request_data_channel &&
	     main_memory_s_xactor_f_wr_data_D_OUT[0] ;
  assign MUX_uart_uart_rRecvState_write_1__SEL_6 =
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;
  assign MUX_uart_uart_rXmitDataOut_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_uart_uart_rXmitDataOut_write_1__SEL_2 =
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ;
  assign MUX_uart_uart_rXmitDataOut_write_1__SEL_3 =
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;
  assign MUX_bootrom_dut_rg_req_write_1__VAL_1 =
	     { address__h17175[1:0], bootrom_rg_read_packet[15:14] } ;
  assign MUX_bootrom_dut_rg_req_write_1__VAL_2 =
	     { bootrom_s_xactor_f_rd_addr_D_OUT[21:20],
	       bootrom_s_xactor_f_rd_addr_D_OUT[15:14] } ;
  assign MUX_bootrom_rg_read_packet_write_1__VAL_1 =
	     { address__h17175, bootrom_rg_read_packet[19:0] } ;
  assign MUX_bootrom_rg_readburst_counter_write_1__VAL_1 =
	     bootrom_rg_readburst_counter + 8'd1 ;
  assign MUX_bootrom_s_xactor_f_wr_resp_enq_1__VAL_1 =
	     { 2'd2, bootrom_s_xactor_f_wr_addr_D_OUT[3:0] } ;
  assign MUX_main_memory_rg_read_packet_write_1__VAL_1 =
	     { address__h14451, main_memory_rg_read_packet[19:0] } ;
  assign MUX_main_memory_rg_readburst_counter_write_1__VAL_1 =
	     main_memory_rg_readburst_counter + 8'd1 ;
  assign MUX_main_memory_rg_write_packet_write_1__VAL_2 =
	     { addr__h13604, main_memory_rg_write_packet[19:0] } ;
  assign MUX_main_memory_s_xactor_f_wr_resp_enq_1__VAL_1 =
	     { 2'd0, main_memory_s_xactor_f_wr_addr_D_OUT[3:0] } ;
  assign MUX_main_memory_s_xactor_f_wr_resp_enq_1__VAL_2 =
	     { 2'd0, main_memory_rg_write_packet[3:0] } ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_1 =
	     uart_uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_2 =
	     (uart_uart_rRecvCellCount == 4'h4) ?
	       (uart_uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  always@(uart_uart_rRecvBitCount)
  begin
    case (uart_uart_rRecvBitCount)
      4'd8, 4'd9, 4'd10: MUX_uart_uart_rRecvState_write_1__VAL_3 = 3'd6;
      default: MUX_uart_uart_rRecvState_write_1__VAL_3 = 3'd3;
    endcase
  end
  assign MUX_uart_uart_rRecvState_write_1__VAL_4 =
	     uart_uart_rRecvData ? 3'd2 : 3'd0 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_1 =
	     uart_uart_fifoXmit_EMPTY_N ? 3'd1 : 3'd0 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_2 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 3'd2 : 3'd1 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_3 =
	     (uart_uart_rXmitCellCount == 4'hF) ?
	       ((uart_uart_rXmitBitCount == 4'd7) ? 3'd4 : 3'd3) :
	       3'd2 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_4 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 3'd4 : 3'd7 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_5 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd4 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_6 =
	     (uart_uart_rXmitCellCount == 4'h7) ? 3'd0 : 3'd5 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_7 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd6 ;

  // inlined wires
  assign rg_read_rx_1_whas =
	     WILL_FIRE_RL_check_if_character_present && x_wget__h11547[3] ;
  assign bootrom_dut_read_request_sent_1_whas =
	     bootrom_read_state &&
	     !bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343 ||
	     WILL_FIRE_RL_bootrom_read_request_first ;
  assign uart_uart_fifoRecv_r_deq_whas =
	     WILL_FIRE_RL_write_received_character &&
	     uart_uart_fifoRecv_EMPTY_N ;
  assign uart_uart_pwRecvCellCountReset_whas =
	     WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell &&
	     uart_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ||
	     WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit ;
  assign uart_uart_pwRecvResetBitCount_whas =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     uart_uart_rRecvData ;
  assign uart_uart_pwRecvEnableBitCount_whas =
	     WILL_FIRE_RL_uart_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;
  assign uart_uart_pwXmitCellCountReset_whas =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_EMPTY_N ||
	     _dor2uart_uart_pwXmitCellCountReset_EN_wset &&
	     uart_uart_rXmitCellCount == 4'hF ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 &&
	     uart_uart_rXmitCellCount == 4'h7 ;
  assign uart_uart_pwXmitEnableBitCount_whas =
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time &&
	     uart_uart_rXmitCellCount == 4'hF &&
	     uart_uart_rXmitBitCount != 4'd7 ;
  assign uart_uart_pwXmitLoadBuffer_whas =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_EMPTY_N ;
  assign main_memory_dut_read_request_sent_port1__read =
	     !CAN_FIRE_RL_main_memory_read_response &&
	     main_memory_dut_read_request_sent ;
  assign main_memory_dut_read_request_sent_EN_port1__write =
	     WILL_FIRE_RL_main_memory_read_request_burst &&
	     !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 ||
	     WILL_FIRE_RL_main_memory_read_request_first ;
  assign main_memory_dut_read_request_sent_port2__read =
	     main_memory_dut_read_request_sent_EN_port1__write ?
	       1'd1 :
	       main_memory_dut_read_request_sent_port1__read ;

  // register bootrom_dut_read_request_sent
  assign bootrom_dut_read_request_sent_D_IN =
	     bootrom_dut_read_request_sent_1_whas ;
  assign bootrom_dut_read_request_sent_EN = 1'd1 ;

  // register bootrom_dut_rg_req
  assign bootrom_dut_rg_req_D_IN =
	     MUX_bootrom_dut_dmemLSB_put_1__SEL_1 ?
	       MUX_bootrom_dut_rg_req_write_1__VAL_1 :
	       MUX_bootrom_dut_rg_req_write_1__VAL_2 ;
  assign bootrom_dut_rg_req_EN = bootrom_dut_read_request_sent_1_whas ;

  // register bootrom_read_state
  assign bootrom_read_state_D_IN = !MUX_bootrom_read_state_write_1__SEL_1 ;
  assign bootrom_read_state_EN =
	     bootrom_read_state &&
	     bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343 ||
	     WILL_FIRE_RL_bootrom_read_request_first &&
	     bootrom_s_xactor_f_rd_addr_D_OUT[13:6] != 8'd0 ;

  // register bootrom_rg_rd_id
  assign bootrom_rg_rd_id_D_IN = bootrom_s_xactor_f_rd_addr_D_OUT[3:0] ;
  assign bootrom_rg_rd_id_EN = CAN_FIRE_RL_bootrom_read_request_first ;

  // register bootrom_rg_read_packet
  assign bootrom_rg_read_packet_D_IN =
	     MUX_bootrom_dut_dmemLSB_put_1__SEL_1 ?
	       MUX_bootrom_rg_read_packet_write_1__VAL_1 :
	       bootrom_s_xactor_f_rd_addr_D_OUT ;
  assign bootrom_rg_read_packet_EN = bootrom_dut_read_request_sent_1_whas ;

  // register bootrom_rg_readburst_counter
  assign bootrom_rg_readburst_counter_D_IN =
	     MUX_bootrom_dut_dmemLSB_put_1__SEL_1 ?
	       MUX_bootrom_rg_readburst_counter_write_1__VAL_1 :
	       8'd0 ;
  assign bootrom_rg_readburst_counter_EN =
	     bootrom_dut_read_request_sent_1_whas ;

  // register bootrom_rg_write_response
  assign bootrom_rg_write_response_D_IN =
	     MUX_bootrom_s_xactor_f_wr_resp_enq_1__VAL_1 ;
  assign bootrom_rg_write_response_EN =
	     CAN_FIRE_RL_bootrom_write_request_address_channel ;

  // register bootrom_write_state
  assign bootrom_write_state_D_IN =
	     !MUX_bootrom_s_xactor_f_wr_resp_enq_1__SEL_2 ;
  assign bootrom_write_state_EN =
	     WILL_FIRE_RL_bootrom_write_request_data_channel &&
	     bootrom_s_xactor_f_wr_data_D_OUT[0] ||
	     WILL_FIRE_RL_bootrom_write_request_address_channel &&
	     !bootrom_s_xactor_f_wr_data_D_OUT[0] ;

  // register dump
  assign dump_D_IN = TASK_fopen___d497 ;
  assign dump_EN = rg_cnt < 5'd5 ;

  // register dump1
  assign dump1_D_IN = TASK_fopen___d506 ;
  assign dump1_EN = rg_cnt_95_ULT_5___d496 ;

  // register main_memory_dut_read_request_sent
  assign main_memory_dut_read_request_sent_D_IN =
	     main_memory_dut_read_request_sent_port2__read ;
  assign main_memory_dut_read_request_sent_EN = 1'b1 ;

  // register main_memory_read_state
  assign main_memory_read_state_D_IN =
	     !MUX_main_memory_read_state_write_1__SEL_1 ;
  assign main_memory_read_state_EN =
	     WILL_FIRE_RL_main_memory_read_request_burst &&
	     main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 ||
	     WILL_FIRE_RL_main_memory_read_request_first &&
	     main_memory_s_xactor_f_rd_addr_D_OUT[13:6] != 8'd0 ;

  // register main_memory_rg_rd_id
  assign main_memory_rg_rd_id_D_IN =
	     main_memory_s_xactor_f_rd_addr_D_OUT[3:0] ;
  assign main_memory_rg_rd_id_EN =
	     CAN_FIRE_RL_main_memory_read_request_first ;

  // register main_memory_rg_read_packet
  assign main_memory_rg_read_packet_D_IN =
	     MUX_main_memory_dut_dmemMSB_a_put_1__SEL_1 ?
	       MUX_main_memory_rg_read_packet_write_1__VAL_1 :
	       main_memory_s_xactor_f_rd_addr_D_OUT ;
  assign main_memory_rg_read_packet_EN =
	     WILL_FIRE_RL_main_memory_read_request_burst &&
	     !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 ||
	     WILL_FIRE_RL_main_memory_read_request_first ;

  // register main_memory_rg_readburst_counter
  assign main_memory_rg_readburst_counter_D_IN =
	     MUX_main_memory_dut_dmemMSB_a_put_1__SEL_1 ?
	       MUX_main_memory_rg_readburst_counter_write_1__VAL_1 :
	       8'd0 ;
  assign main_memory_rg_readburst_counter_EN =
	     WILL_FIRE_RL_main_memory_read_request_burst &&
	     !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 ||
	     WILL_FIRE_RL_main_memory_read_request_first ;

  // register main_memory_rg_write_packet
  assign main_memory_rg_write_packet_D_IN =
	     WILL_FIRE_RL_main_memory_write_request_address_channel ?
	       main_memory_s_xactor_f_wr_addr_D_OUT :
	       MUX_main_memory_rg_write_packet_write_1__VAL_2 ;
  assign main_memory_rg_write_packet_EN =
	     WILL_FIRE_RL_main_memory_write_request_address_channel ||
	     WILL_FIRE_RL_main_memory_write_request_data_channel ;

  // register main_memory_write_state
  assign main_memory_write_state_D_IN =
	     !MUX_main_memory_s_xactor_f_wr_resp_enq_1__SEL_2 ;
  assign main_memory_write_state_EN =
	     WILL_FIRE_RL_main_memory_write_request_data_channel &&
	     main_memory_s_xactor_f_wr_data_D_OUT[0] ||
	     WILL_FIRE_RL_main_memory_write_request_address_channel &&
	     !main_memory_s_xactor_f_wr_data_D_OUT[0] ;

  // register rg_cnt
  assign rg_cnt_D_IN = rg_cnt + 5'd1 ;
  assign rg_cnt_EN = rg_cnt < 5'd5 ;

  // register rg_read_rx
  assign rg_read_rx_D_IN = rg_read_rx_1_whas ;
  assign rg_read_rx_EN = 1'd1 ;

  // register uart_baud_value
  assign uart_baud_value_D_IN = 16'h0 ;
  assign uart_baud_value_EN = 1'b0 ;

  // register uart_uart_fifoRecv_countReg
  assign uart_uart_fifoRecv_countReg_D_IN =
	     CAN_FIRE_RL_uart_uart_receive_stop_last_bit ?
	       uart_uart_fifoRecv_countReg + 5'd1 :
	       uart_uart_fifoRecv_countReg - 5'd1 ;
  assign uart_uart_fifoRecv_countReg_EN =
	     CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter ;

  // register uart_uart_fifoXmit_countReg
  assign uart_uart_fifoXmit_countReg_D_IN =
	     uart_uart_fifoXmit_countReg - 5'd1 ;
  assign uart_uart_fifoXmit_countReg_EN =
	     CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter ;

  // register uart_uart_rRecvBitCount
  assign uart_uart_rRecvBitCount_D_IN =
	     uart_uart_pwRecvResetBitCount_whas ? 4'd0 : x__h5406 ;
  assign uart_uart_rRecvBitCount_EN =
	     uart_uart_pwRecvResetBitCount_whas ||
	     uart_uart_pwRecvEnableBitCount_whas ;

  // register uart_uart_rRecvCellCount
  assign uart_uart_rRecvCellCount_D_IN =
	     uart_uart_pwRecvCellCountReset_whas ? 4'd0 : x__h3702 ;
  assign uart_uart_rRecvCellCount_EN =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // register uart_uart_rRecvData
  assign uart_uart_rRecvData_D_IN = soc_uart_io_SOUT ;
  assign uart_uart_rRecvData_EN = 1'd1 ;

  // register uart_uart_rRecvParity
  assign uart_uart_rRecvParity_D_IN = uart_uart_rRecvData ;
  assign uart_uart_rRecvParity_EN = CAN_FIRE_RL_uart_uart_receive_parity_bit ;

  // register uart_uart_rRecvState
  always@(WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit or
	  MUX_uart_uart_rRecvState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell or
	  MUX_uart_uart_rRecvState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_uart_uart_rRecvState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_uart_receive_stop_first_bit or
	  MUX_uart_uart_rRecvState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_uart_receive_stop_last_bit or
	  MUX_uart_uart_rRecvState_write_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_1;
      WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_3;
      WILL_FIRE_RL_uart_uart_receive_stop_first_bit:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_4;
      WILL_FIRE_RL_uart_uart_receive_stop_last_bit:
	  uart_uart_rRecvState_D_IN = 3'd0;
      MUX_uart_uart_rRecvState_write_1__SEL_6:
	  uart_uart_rRecvState_D_IN = 3'd2;
      default: uart_uart_rRecvState_D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rRecvState_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;

  // register uart_uart_rXmitBitCount
  assign uart_uart_rXmitBitCount_D_IN =
	     CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command ?
	       4'd0 :
	       x__h7188 ;
  assign uart_uart_rXmitBitCount_EN =
	     CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command ||
	     uart_uart_pwXmitEnableBitCount_whas ;

  // register uart_uart_rXmitCellCount
  assign uart_uart_rXmitCellCount_D_IN =
	     uart_uart_pwXmitCellCountReset_whas ? 4'd0 : x__h7162 ;
  assign uart_uart_rXmitCellCount_EN =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // register uart_uart_rXmitDataOut
  always@(MUX_uart_uart_rXmitDataOut_write_1__SEL_1 or
	  uart_uart_vrXmitBuffer_0 or
	  MUX_uart_uart_rXmitDataOut_write_1__SEL_2 or
	  MUX_uart_uart_rXmitDataOut_write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_uart_rXmitDataOut_write_1__SEL_1:
	  uart_uart_rXmitDataOut_D_IN = uart_uart_vrXmitBuffer_0;
      MUX_uart_uart_rXmitDataOut_write_1__SEL_2:
	  uart_uart_rXmitDataOut_D_IN = 1'b0;
      MUX_uart_uart_rXmitDataOut_write_1__SEL_3:
	  uart_uart_rXmitDataOut_D_IN = 1'b1;
      default: uart_uart_rXmitDataOut_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rXmitDataOut_EN =
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;

  // register uart_uart_rXmitParity
  assign uart_uart_rXmitParity_D_IN = z__h8680 ^ uart_uart_fifoXmit_D_OUT[7] ;
  assign uart_uart_rXmitParity_EN =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_load ;

  // register uart_uart_rXmitState
  always@(WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command or
	  MUX_uart_uart_rXmitState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_uart_transmit_send_start_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time or
	  MUX_uart_uart_rXmitState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_uart_transmit_send_parity_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_5 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 or
	  MUX_uart_uart_rXmitState_write_1__VAL_6 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 or
	  MUX_uart_uart_rXmitState_write_1__VAL_7 or
	  WILL_FIRE_RL_uart_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_1;
      WILL_FIRE_RL_uart_uart_transmit_send_start_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_3;
      WILL_FIRE_RL_uart_uart_transmit_send_parity_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_4;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_5;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_6;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_7;
      WILL_FIRE_RL_uart_uart_transmit_shift_next_bit:
	  uart_uart_rXmitState_D_IN = 3'd2;
      default: uart_uart_rXmitState_D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rXmitState_EN =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ;

  // register uart_uart_vrRecvBuffer_0
  assign uart_uart_vrRecvBuffer_0_D_IN = uart_uart_vrRecvBuffer_1 ;
  assign uart_uart_vrRecvBuffer_0_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_1
  assign uart_uart_vrRecvBuffer_1_D_IN = uart_uart_vrRecvBuffer_2 ;
  assign uart_uart_vrRecvBuffer_1_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_2
  assign uart_uart_vrRecvBuffer_2_D_IN = uart_uart_vrRecvBuffer_3 ;
  assign uart_uart_vrRecvBuffer_2_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_3
  assign uart_uart_vrRecvBuffer_3_D_IN = uart_uart_vrRecvBuffer_4 ;
  assign uart_uart_vrRecvBuffer_3_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_4
  assign uart_uart_vrRecvBuffer_4_D_IN = uart_uart_vrRecvBuffer_5 ;
  assign uart_uart_vrRecvBuffer_4_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_5
  assign uart_uart_vrRecvBuffer_5_D_IN = uart_uart_vrRecvBuffer_6 ;
  assign uart_uart_vrRecvBuffer_5_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_6
  assign uart_uart_vrRecvBuffer_6_D_IN = uart_uart_vrRecvBuffer_7 ;
  assign uart_uart_vrRecvBuffer_6_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_7
  assign uart_uart_vrRecvBuffer_7_D_IN = uart_uart_rRecvData ;
  assign uart_uart_vrRecvBuffer_7_EN =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrXmitBuffer_0
  assign uart_uart_vrXmitBuffer_0_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[0] :
	       uart_uart_vrXmitBuffer_1 ;
  assign uart_uart_vrXmitBuffer_0_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_1
  assign uart_uart_vrXmitBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[1] :
	       uart_uart_vrXmitBuffer_2 ;
  assign uart_uart_vrXmitBuffer_1_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_2
  assign uart_uart_vrXmitBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[2] :
	       uart_uart_vrXmitBuffer_3 ;
  assign uart_uart_vrXmitBuffer_2_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_3
  assign uart_uart_vrXmitBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[3] :
	       uart_uart_vrXmitBuffer_4 ;
  assign uart_uart_vrXmitBuffer_3_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_4
  assign uart_uart_vrXmitBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[4] :
	       uart_uart_vrXmitBuffer_5 ;
  assign uart_uart_vrXmitBuffer_4_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_5
  assign uart_uart_vrXmitBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[5] :
	       uart_uart_vrXmitBuffer_6 ;
  assign uart_uart_vrXmitBuffer_5_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_6
  assign uart_uart_vrXmitBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[6] :
	       uart_uart_vrXmitBuffer_7 ;
  assign uart_uart_vrXmitBuffer_6_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_7
  assign uart_uart_vrXmitBuffer_7_D_IN =
	     !WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     uart_uart_fifoXmit_D_OUT[7] ;
  assign uart_uart_vrXmitBuffer_7_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // submodule bootrom_dut_dmemLSB
  assign bootrom_dut_dmemLSB_ADDR =
	     MUX_bootrom_dut_dmemLSB_put_1__SEL_1 ?
	       address7175_MINUS_0x1000__q4[14:2] :
	       bootrom_s_xactor_f_rd_addrD_OUT_BITS_51_TO_20_ETC__q5[14:2] ;
  assign bootrom_dut_dmemLSB_DI =
	     MUX_bootrom_dut_dmemLSB_put_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       32'hAAAAAAAA /* unspecified value */  ;
  assign bootrom_dut_dmemLSB_WE = 1'd0 ;
  assign bootrom_dut_dmemLSB_EN = bootrom_dut_read_request_sent_1_whas ;

  // submodule bootrom_s_xactor_f_rd_addr
  assign bootrom_s_xactor_f_rd_addr_D_IN =
	     { soc_boot_mem_master_ARADDR,
	       soc_boot_mem_master_ARPROT,
	       soc_boot_mem_master_ARSIZE,
	       soc_boot_mem_master_ARLEN,
	       soc_boot_mem_master_ARBURST,
	       soc_boot_mem_master_ARID } ;
  assign bootrom_s_xactor_f_rd_addr_ENQ =
	     soc_boot_mem_master_ARVALID &&
	     bootrom_s_xactor_f_rd_addr_FULL_N ;
  assign bootrom_s_xactor_f_rd_addr_DEQ =
	     CAN_FIRE_RL_bootrom_read_request_first ;
  assign bootrom_s_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule bootrom_s_xactor_f_rd_data
  assign bootrom_s_xactor_f_rd_data_D_IN =
	     { 2'd0,
	       bootrom_dut_dmemLSB_DO,
	       bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343,
	       bootrom_rg_read_packet[3:0] } ;
  assign bootrom_s_xactor_f_rd_data_ENQ = CAN_FIRE_RL_bootrom_read_response ;
  assign bootrom_s_xactor_f_rd_data_DEQ =
	     soc_boot_mem_master_RREADY &&
	     bootrom_s_xactor_f_rd_data_EMPTY_N ;
  assign bootrom_s_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule bootrom_s_xactor_f_wr_addr
  assign bootrom_s_xactor_f_wr_addr_D_IN =
	     { soc_boot_mem_master_AWADDR,
	       soc_boot_mem_master_AWPROT,
	       soc_boot_mem_master_AWLEN,
	       soc_boot_mem_master_AWSIZE,
	       soc_boot_mem_master_AWBURST,
	       soc_boot_mem_master_AWID } ;
  assign bootrom_s_xactor_f_wr_addr_ENQ =
	     soc_boot_mem_master_AWVALID &&
	     bootrom_s_xactor_f_wr_addr_FULL_N ;
  assign bootrom_s_xactor_f_wr_addr_DEQ =
	     CAN_FIRE_RL_bootrom_write_request_address_channel ;
  assign bootrom_s_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule bootrom_s_xactor_f_wr_data
  assign bootrom_s_xactor_f_wr_data_D_IN =
	     { soc_boot_mem_master_WDATA,
	       soc_boot_mem_master_WSTRB,
	       soc_boot_mem_master_WID,
	       soc_boot_mem_master_WLAST } ;
  assign bootrom_s_xactor_f_wr_data_ENQ =
	     soc_boot_mem_master_WVALID && bootrom_s_xactor_f_wr_data_FULL_N ;
  assign bootrom_s_xactor_f_wr_data_DEQ =
	     WILL_FIRE_RL_bootrom_write_request_data_channel ||
	     WILL_FIRE_RL_bootrom_write_request_address_channel ;
  assign bootrom_s_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule bootrom_s_xactor_f_wr_resp
  assign bootrom_s_xactor_f_wr_resp_D_IN =
	     MUX_bootrom_s_xactor_f_wr_resp_enq_1__SEL_1 ?
	       MUX_bootrom_s_xactor_f_wr_resp_enq_1__VAL_1 :
	       bootrom_rg_write_response ;
  assign bootrom_s_xactor_f_wr_resp_ENQ =
	     WILL_FIRE_RL_bootrom_write_request_address_channel &&
	     bootrom_s_xactor_f_wr_data_D_OUT[0] ||
	     WILL_FIRE_RL_bootrom_write_request_data_channel &&
	     bootrom_s_xactor_f_wr_data_D_OUT[0] ;
  assign bootrom_s_xactor_f_wr_resp_DEQ =
	     soc_boot_mem_master_BREADY &&
	     bootrom_s_xactor_f_wr_resp_EMPTY_N ;
  assign bootrom_s_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule main_memory_dut_dmemMSB
  assign main_memory_dut_dmemMSB_ADDRA =
	     MUX_main_memory_dut_dmemMSB_a_put_1__SEL_1 ?
	       address4451_MINUS_0x80000000__q6[24:2] :
	       main_memory_s_xactor_f_rd_addrD_OUT_BITS_51_T_ETC__q7[24:2] ;
  assign main_memory_dut_dmemMSB_ADDRB =
	     WILL_FIRE_RL_main_memory_write_request_address_channel ?
	       main_memory_s_xactor_f_wr_addrD_OUT_BITS_51_T_ETC__q8[24:2] :
	       addr3604_MINUS_0x80000000__q9[24:2] ;
  assign main_memory_dut_dmemMSB_DIA =
	     MUX_main_memory_dut_dmemMSB_a_put_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       32'hAAAAAAAA /* unspecified value */  ;
  assign main_memory_dut_dmemMSB_DIB =
	     main_memory_s_xactor_f_wr_data_D_OUT[40:9] ;
  assign main_memory_dut_dmemMSB_WEA = 4'd0 ;
  assign main_memory_dut_dmemMSB_WEB =
	     main_memory_s_xactor_f_wr_data_D_OUT[8:5] ;
  assign main_memory_dut_dmemMSB_ENA =
	     WILL_FIRE_RL_main_memory_read_request_burst &&
	     !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 ||
	     WILL_FIRE_RL_main_memory_read_request_first ;
  assign main_memory_dut_dmemMSB_ENB =
	     WILL_FIRE_RL_main_memory_write_request_address_channel ||
	     WILL_FIRE_RL_main_memory_write_request_data_channel ;

  // submodule main_memory_s_xactor_f_rd_addr
  assign main_memory_s_xactor_f_rd_addr_D_IN =
	     { soc_main_mem_master_ARADDR,
	       soc_main_mem_master_ARPROT,
	       soc_main_mem_master_ARSIZE,
	       soc_main_mem_master_ARLEN,
	       soc_main_mem_master_ARBURST,
	       soc_main_mem_master_ARID } ;
  assign main_memory_s_xactor_f_rd_addr_ENQ =
	     soc_main_mem_master_ARVALID &&
	     main_memory_s_xactor_f_rd_addr_FULL_N ;
  assign main_memory_s_xactor_f_rd_addr_DEQ =
	     CAN_FIRE_RL_main_memory_read_request_first ;
  assign main_memory_s_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule main_memory_s_xactor_f_rd_data
  assign main_memory_s_xactor_f_rd_data_D_IN =
	     { 2'd0,
	       main_memory_dut_dmemMSB_DOA,
	       main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251,
	       main_memory_rg_read_packet[3:0] } ;
  assign main_memory_s_xactor_f_rd_data_ENQ =
	     CAN_FIRE_RL_main_memory_read_response ;
  assign main_memory_s_xactor_f_rd_data_DEQ =
	     soc_main_mem_master_RREADY &&
	     main_memory_s_xactor_f_rd_data_EMPTY_N ;
  assign main_memory_s_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule main_memory_s_xactor_f_wr_addr
  assign main_memory_s_xactor_f_wr_addr_D_IN =
	     { soc_main_mem_master_AWADDR,
	       soc_main_mem_master_AWPROT,
	       soc_main_mem_master_AWLEN,
	       soc_main_mem_master_AWSIZE,
	       soc_main_mem_master_AWBURST,
	       soc_main_mem_master_AWID } ;
  assign main_memory_s_xactor_f_wr_addr_ENQ =
	     soc_main_mem_master_AWVALID &&
	     main_memory_s_xactor_f_wr_addr_FULL_N ;
  assign main_memory_s_xactor_f_wr_addr_DEQ =
	     CAN_FIRE_RL_main_memory_write_request_address_channel ;
  assign main_memory_s_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule main_memory_s_xactor_f_wr_data
  assign main_memory_s_xactor_f_wr_data_D_IN =
	     { soc_main_mem_master_WDATA,
	       soc_main_mem_master_WSTRB,
	       soc_main_mem_master_WID,
	       soc_main_mem_master_WLAST } ;
  assign main_memory_s_xactor_f_wr_data_ENQ =
	     soc_main_mem_master_WVALID &&
	     main_memory_s_xactor_f_wr_data_FULL_N ;
  assign main_memory_s_xactor_f_wr_data_DEQ =
	     WILL_FIRE_RL_main_memory_write_request_data_channel ||
	     WILL_FIRE_RL_main_memory_write_request_address_channel ;
  assign main_memory_s_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule main_memory_s_xactor_f_wr_resp
  assign main_memory_s_xactor_f_wr_resp_D_IN =
	     MUX_main_memory_s_xactor_f_wr_resp_enq_1__SEL_1 ?
	       MUX_main_memory_s_xactor_f_wr_resp_enq_1__VAL_1 :
	       MUX_main_memory_s_xactor_f_wr_resp_enq_1__VAL_2 ;
  assign main_memory_s_xactor_f_wr_resp_ENQ =
	     WILL_FIRE_RL_main_memory_write_request_address_channel &&
	     main_memory_s_xactor_f_wr_data_D_OUT[0] ||
	     WILL_FIRE_RL_main_memory_write_request_data_channel &&
	     main_memory_s_xactor_f_wr_data_D_OUT[0] ;
  assign main_memory_s_xactor_f_wr_resp_DEQ =
	     soc_main_mem_master_BREADY &&
	     main_memory_s_xactor_f_wr_resp_EMPTY_N ;
  assign main_memory_s_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule soc
  assign soc_boot_mem_master_ARREADY = bootrom_s_xactor_f_rd_addr_FULL_N ;
  assign soc_boot_mem_master_AWREADY = bootrom_s_xactor_f_wr_addr_FULL_N ;
  assign soc_boot_mem_master_BID = bootrom_s_xactor_f_wr_resp_D_OUT[3:0] ;
  assign soc_boot_mem_master_BRESP = bootrom_s_xactor_f_wr_resp_D_OUT[5:4] ;
  assign soc_boot_mem_master_BVALID = bootrom_s_xactor_f_wr_resp_EMPTY_N ;
  assign soc_boot_mem_master_RDATA = bootrom_s_xactor_f_rd_data_D_OUT[36:5] ;
  assign soc_boot_mem_master_RID = bootrom_s_xactor_f_rd_data_D_OUT[3:0] ;
  assign soc_boot_mem_master_RLAST = bootrom_s_xactor_f_rd_data_D_OUT[4] ;
  assign soc_boot_mem_master_RRESP = bootrom_s_xactor_f_rd_data_D_OUT[38:37] ;
  assign soc_boot_mem_master_RVALID = bootrom_s_xactor_f_rd_data_EMPTY_N ;
  assign soc_boot_mem_master_WREADY = bootrom_s_xactor_f_wr_data_FULL_N ;
  assign soc_main_mem_master_ARREADY = main_memory_s_xactor_f_rd_addr_FULL_N ;
  assign soc_main_mem_master_AWREADY = main_memory_s_xactor_f_wr_addr_FULL_N ;
  assign soc_main_mem_master_BID = main_memory_s_xactor_f_wr_resp_D_OUT[3:0] ;
  assign soc_main_mem_master_BRESP =
	     main_memory_s_xactor_f_wr_resp_D_OUT[5:4] ;
  assign soc_main_mem_master_BVALID = main_memory_s_xactor_f_wr_resp_EMPTY_N ;
  assign soc_main_mem_master_RDATA =
	     main_memory_s_xactor_f_rd_data_D_OUT[36:5] ;
  assign soc_main_mem_master_RID = main_memory_s_xactor_f_rd_data_D_OUT[3:0] ;
  assign soc_main_mem_master_RLAST = main_memory_s_xactor_f_rd_data_D_OUT[4] ;
  assign soc_main_mem_master_RRESP =
	     main_memory_s_xactor_f_rd_data_D_OUT[38:37] ;
  assign soc_main_mem_master_RVALID = main_memory_s_xactor_f_rd_data_EMPTY_N ;
  assign soc_main_mem_master_WREADY = main_memory_s_xactor_f_wr_data_FULL_N ;
  assign soc_uart_io_SIN = uart_uart_rXmitDataOut ;
  assign soc_EN_io_dump_get = CAN_FIRE_RL_write_dump_file ;

  // submodule tck_clk
  assign tck_clk_CLK_IN = 1'b0 ;
  assign tck_clk_COND_IN = 1'b0 ;
  assign tck_clk_CLK_IN_EN = 1'b0 ;
  assign tck_clk_COND_IN_EN = 1'b0 ;

  // submodule trst
  assign trst_ASSERT_IN = 1'b0 ;

  // submodule uart_uart_baudGen_rBaudCounter
  assign uart_uart_baudGen_rBaudCounter_DATA_A = 16'd1 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_B = 16'h0 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_C = 16'h0 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_F = 16'd0 ;
  assign uart_uart_baudGen_rBaudCounter_ADDA =
	     uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign uart_uart_baudGen_rBaudCounter_ADDB = 1'b0 ;
  assign uart_uart_baudGen_rBaudCounter_SETC = 1'b0 ;
  assign uart_uart_baudGen_rBaudCounter_SETF =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // submodule uart_uart_baudGen_rBaudTickCounter
  assign uart_uart_baudGen_rBaudTickCounter_DATA_A = 3'd1 ;
  assign uart_uart_baudGen_rBaudTickCounter_DATA_B = 3'h0 ;
  assign uart_uart_baudGen_rBaudTickCounter_DATA_C = 3'h0 ;
  assign uart_uart_baudGen_rBaudTickCounter_DATA_F = 3'h0 ;
  assign uart_uart_baudGen_rBaudTickCounter_ADDA =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;
  assign uart_uart_baudGen_rBaudTickCounter_ADDB = 1'b0 ;
  assign uart_uart_baudGen_rBaudTickCounter_SETC = 1'b0 ;
  assign uart_uart_baudGen_rBaudTickCounter_SETF = 1'b0 ;

  // submodule uart_uart_fifoRecv
  assign uart_uart_fifoRecv_D_IN =
	     { uart_uart_vrRecvBuffer_7,
	       uart_uart_vrRecvBuffer_6,
	       uart_uart_vrRecvBuffer_5,
	       uart_uart_vrRecvBuffer_4,
	       uart_uart_vrRecvBuffer_3,
	       uart_uart_vrRecvBuffer_2,
	       uart_uart_vrRecvBuffer_1,
	       uart_uart_vrRecvBuffer_0 } ;
  assign uart_uart_fifoRecv_ENQ =
	     CAN_FIRE_RL_uart_uart_receive_stop_last_bit ;
  assign uart_uart_fifoRecv_DEQ = uart_uart_fifoRecv_r_deq_whas ;
  assign uart_uart_fifoRecv_CLR = 1'b0 ;

  // submodule uart_uart_fifoXmit
  assign uart_uart_fifoXmit_D_IN = 8'h0 ;
  assign uart_uart_fifoXmit_ENQ = 1'b0 ;
  assign uart_uart_fifoXmit_DEQ = CAN_FIRE_RL_uart_uart_transmit_buffer_load ;
  assign uart_uart_fifoXmit_CLR = 1'b0 ;

  // remaining internal signals
  assign _dor2uart_uart_pwXmitCellCountReset_EN_wset =
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ;
  assign addr3604_MINUS_0x80000000__q9 = addr__h13604 - 32'h80000000 ;
  assign address4451_MINUS_0x80000000__q6 = address__h14451 - 32'h80000000 ;
  assign address7175_MINUS_0x1000__q4 = address__h17175 - 32'h00001000 ;
  assign bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343 =
	     bootrom_rg_readburst_counter == bootrom_rg_read_packet[13:6] ;
  assign bootrom_s_xactor_f_rd_addrD_OUT_BITS_51_TO_20_ETC__q5 =
	     bootrom_s_xactor_f_rd_addr_D_OUT[51:20] - 32'h00001000 ;
  assign data__h20549 =
	     uart_uart_fifoRecv_EMPTY_N ?
	       {4{uart_uart_fifoRecv_D_OUT}} :
	       32'd0 ;
  assign main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 =
	     main_memory_rg_readburst_counter ==
	     main_memory_rg_read_packet[13:6] ;
  assign main_memory_s_xactor_f_rd_addrD_OUT_BITS_51_T_ETC__q7 =
	     main_memory_s_xactor_f_rd_addr_D_OUT[51:20] - 32'h80000000 ;
  assign main_memory_s_xactor_f_wr_addrD_OUT_BITS_51_T_ETC__q8 =
	     main_memory_s_xactor_f_wr_addr_D_OUT[51:20] - 32'h80000000 ;
  assign mask__h13657 = 32'hFFFFFFFF << x__h13722 ;
  assign mask__h14501 = 32'hFFFFFFFF << x__h14542 ;
  assign mask__h17225 = 32'hFFFFFFFF << x__h17266 ;
  assign new_address__h13655 =
	     main_memory_rg_write_packet[51:20] +
	     (32'b00000000000000000000000000000001 <<
	      main_memory_rg_write_packet[8:6]) ;
  assign new_address__h14499 =
	     main_memory_rg_read_packet[51:20] +
	     (32'b00000000000000000000000000000001 <<
	      main_memory_rg_read_packet[16:14]) ;
  assign new_address__h17223 =
	     bootrom_rg_read_packet[51:20] +
	     (32'b00000000000000000000000000000001 <<
	      bootrom_rg_read_packet[16:14]) ;
  assign rg_cnt_95_ULT_5___d496 = rg_cnt < 5'd5 ;
  assign temp1__h13658 = main_memory_rg_write_packet[51:20] & mask__h13657 ;
  assign temp1__h14502 = main_memory_rg_read_packet[51:20] & mask__h14501 ;
  assign temp1__h17226 = bootrom_rg_read_packet[51:20] & mask__h17225 ;
  assign temp2__h13659 = new_address__h13655 & y__h13781 ;
  assign temp2__h14503 = new_address__h14499 & y__h14601 ;
  assign temp2__h17227 = new_address__h17223 & y__h17325 ;
  assign uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 =
	     uart_uart_baudGen_rBaudCounter_Q_OUT + 16'd1 < uart_baud_value ;
  assign x__h13722 =
	     main_memory_rg_write_packet[8:6] +
	     CASE_main_memory_rg_write_packet_BITS_16_TO_9__ETC__q1 ;
  assign x__h14542 =
	     main_memory_rg_read_packet[16:14] +
	     CASE_main_memory_rg_read_packet_BITS_13_TO_6_3_ETC__q2 ;
  assign x__h17266 =
	     bootrom_rg_read_packet[16:14] +
	     CASE_bootrom_rg_read_packet_BITS_13_TO_6_3_2_7_ETC__q3 ;
  assign x__h3702 = uart_uart_rRecvCellCount + 4'd1 ;
  assign x__h5406 = uart_uart_rRecvBitCount + 4'd1 ;
  assign x__h7162 = uart_uart_rXmitCellCount + 4'd1 ;
  assign x__h7188 = uart_uart_rXmitBitCount + 4'd1 ;
  assign x_wget__h11547 =
	     { uart_uart_fifoRecv_EMPTY_N,
	       uart_uart_fifoRecv_FULL_N,
	       uart_uart_fifoXmit_FULL_N,
	       !uart_uart_fifoXmit_EMPTY_N && uart_uart_rXmitState == 3'd0 } ;
  assign y__h13781 = ~mask__h13657 ;
  assign y__h14601 = ~mask__h14501 ;
  assign y__h17325 = ~mask__h17225 ;
  assign z__h8645 =
	     uart_uart_fifoXmit_D_OUT[0] ^ uart_uart_fifoXmit_D_OUT[1] ;
  assign z__h8652 = z__h8645 ^ uart_uart_fifoXmit_D_OUT[2] ;
  assign z__h8659 = z__h8652 ^ uart_uart_fifoXmit_D_OUT[3] ;
  assign z__h8666 = z__h8659 ^ uart_uart_fifoXmit_D_OUT[4] ;
  assign z__h8673 = z__h8666 ^ uart_uart_fifoXmit_D_OUT[5] ;
  assign z__h8680 = z__h8673 ^ uart_uart_fifoXmit_D_OUT[6] ;
  always@(main_memory_rg_write_packet)
  begin
    case (main_memory_rg_write_packet[16:9])
      8'd3: CASE_main_memory_rg_write_packet_BITS_16_TO_9__ETC__q1 = 3'd2;
      8'd7: CASE_main_memory_rg_write_packet_BITS_16_TO_9__ETC__q1 = 3'd3;
      8'd15: CASE_main_memory_rg_write_packet_BITS_16_TO_9__ETC__q1 = 3'd4;
      default: CASE_main_memory_rg_write_packet_BITS_16_TO_9__ETC__q1 = 3'd1;
    endcase
  end
  always@(main_memory_rg_read_packet)
  begin
    case (main_memory_rg_read_packet[13:6])
      8'd3: CASE_main_memory_rg_read_packet_BITS_13_TO_6_3_ETC__q2 = 3'd2;
      8'd7: CASE_main_memory_rg_read_packet_BITS_13_TO_6_3_ETC__q2 = 3'd3;
      8'd15: CASE_main_memory_rg_read_packet_BITS_13_TO_6_3_ETC__q2 = 3'd4;
      default: CASE_main_memory_rg_read_packet_BITS_13_TO_6_3_ETC__q2 = 3'd1;
    endcase
  end
  always@(bootrom_rg_read_packet)
  begin
    case (bootrom_rg_read_packet[13:6])
      8'd3: CASE_bootrom_rg_read_packet_BITS_13_TO_6_3_2_7_ETC__q3 = 3'd2;
      8'd7: CASE_bootrom_rg_read_packet_BITS_13_TO_6_3_2_7_ETC__q3 = 3'd3;
      8'd15: CASE_bootrom_rg_read_packet_BITS_13_TO_6_3_2_7_ETC__q3 = 3'd4;
      default: CASE_bootrom_rg_read_packet_BITS_13_TO_6_3_2_7_ETC__q3 = 3'd1;
    endcase
  end
  always@(main_memory_rg_write_packet or
	  temp1__h13658 or temp2__h13659 or new_address__h13655)
  begin
    case (main_memory_rg_write_packet[5:4])
      2'd0: addr__h13604 = main_memory_rg_write_packet[51:20];
      2'd1: addr__h13604 = new_address__h13655;
      default: addr__h13604 = temp1__h13658 | temp2__h13659;
    endcase
  end
  always@(main_memory_rg_read_packet or
	  temp1__h14502 or temp2__h14503 or new_address__h14499)
  begin
    case (main_memory_rg_read_packet[5:4])
      2'd0: address__h14451 = main_memory_rg_read_packet[51:20];
      2'd1: address__h14451 = new_address__h14499;
      default: address__h14451 = temp1__h14502 | temp2__h14503;
    endcase
  end
  always@(bootrom_rg_read_packet or
	  temp1__h17226 or temp2__h17227 or new_address__h17223)
  begin
    case (bootrom_rg_read_packet[5:4])
      2'd0: address__h17175 = bootrom_rg_read_packet[51:20];
      2'd1: address__h17175 = new_address__h17223;
      default: address__h17175 = temp1__h17226 | temp2__h17227;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bootrom_dut_read_request_sent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bootrom_dut_rg_req <= `BSV_ASSIGNMENT_DELAY 4'd0;
	bootrom_read_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bootrom_rg_rd_id <= `BSV_ASSIGNMENT_DELAY 4'd0;
	bootrom_rg_read_packet <= `BSV_ASSIGNMENT_DELAY
	    52'hAAAAAAAAAAAAA /* unspecified value */ ;
	bootrom_rg_readburst_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bootrom_rg_write_response <= `BSV_ASSIGNMENT_DELAY
	    6'b101010 /* unspecified value */ ;
	bootrom_write_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	main_memory_dut_read_request_sent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	main_memory_read_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	main_memory_rg_rd_id <= `BSV_ASSIGNMENT_DELAY 4'd0;
	main_memory_rg_read_packet <= `BSV_ASSIGNMENT_DELAY
	    52'hAAAAAAAAAAAAA /* unspecified value */ ;
	main_memory_rg_readburst_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	main_memory_rg_write_packet <= `BSV_ASSIGNMENT_DELAY
	    52'hAAAAAAAAAAAAA /* unspecified value */ ;
	main_memory_write_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_baud_value <= `BSV_ASSIGNMENT_DELAY 16'd5;
	uart_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (bootrom_dut_read_request_sent_EN)
	  bootrom_dut_read_request_sent <= `BSV_ASSIGNMENT_DELAY
	      bootrom_dut_read_request_sent_D_IN;
	if (bootrom_dut_rg_req_EN)
	  bootrom_dut_rg_req <= `BSV_ASSIGNMENT_DELAY bootrom_dut_rg_req_D_IN;
	if (bootrom_read_state_EN)
	  bootrom_read_state <= `BSV_ASSIGNMENT_DELAY bootrom_read_state_D_IN;
	if (bootrom_rg_rd_id_EN)
	  bootrom_rg_rd_id <= `BSV_ASSIGNMENT_DELAY bootrom_rg_rd_id_D_IN;
	if (bootrom_rg_read_packet_EN)
	  bootrom_rg_read_packet <= `BSV_ASSIGNMENT_DELAY
	      bootrom_rg_read_packet_D_IN;
	if (bootrom_rg_readburst_counter_EN)
	  bootrom_rg_readburst_counter <= `BSV_ASSIGNMENT_DELAY
	      bootrom_rg_readburst_counter_D_IN;
	if (bootrom_rg_write_response_EN)
	  bootrom_rg_write_response <= `BSV_ASSIGNMENT_DELAY
	      bootrom_rg_write_response_D_IN;
	if (bootrom_write_state_EN)
	  bootrom_write_state <= `BSV_ASSIGNMENT_DELAY
	      bootrom_write_state_D_IN;
	if (main_memory_dut_read_request_sent_EN)
	  main_memory_dut_read_request_sent <= `BSV_ASSIGNMENT_DELAY
	      main_memory_dut_read_request_sent_D_IN;
	if (main_memory_read_state_EN)
	  main_memory_read_state <= `BSV_ASSIGNMENT_DELAY
	      main_memory_read_state_D_IN;
	if (main_memory_rg_rd_id_EN)
	  main_memory_rg_rd_id <= `BSV_ASSIGNMENT_DELAY
	      main_memory_rg_rd_id_D_IN;
	if (main_memory_rg_read_packet_EN)
	  main_memory_rg_read_packet <= `BSV_ASSIGNMENT_DELAY
	      main_memory_rg_read_packet_D_IN;
	if (main_memory_rg_readburst_counter_EN)
	  main_memory_rg_readburst_counter <= `BSV_ASSIGNMENT_DELAY
	      main_memory_rg_readburst_counter_D_IN;
	if (main_memory_rg_write_packet_EN)
	  main_memory_rg_write_packet <= `BSV_ASSIGNMENT_DELAY
	      main_memory_rg_write_packet_D_IN;
	if (main_memory_write_state_EN)
	  main_memory_write_state <= `BSV_ASSIGNMENT_DELAY
	      main_memory_write_state_D_IN;
	if (uart_baud_value_EN)
	  uart_baud_value <= `BSV_ASSIGNMENT_DELAY uart_baud_value_D_IN;
	if (uart_uart_fifoRecv_countReg_EN)
	  uart_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_uart_fifoRecv_countReg_D_IN;
	if (uart_uart_fifoXmit_countReg_EN)
	  uart_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_uart_fifoXmit_countReg_D_IN;
	if (uart_uart_rRecvData_EN)
	  uart_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY
	      uart_uart_rRecvData_D_IN;
      end
    if (uart_uart_vrRecvBuffer_0_EN)
      uart_uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_0_D_IN;
    if (uart_uart_vrRecvBuffer_1_EN)
      uart_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_1_D_IN;
    if (uart_uart_vrRecvBuffer_2_EN)
      uart_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_2_D_IN;
    if (uart_uart_vrRecvBuffer_3_EN)
      uart_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_3_D_IN;
    if (uart_uart_vrRecvBuffer_4_EN)
      uart_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_4_D_IN;
    if (uart_uart_vrRecvBuffer_5_EN)
      uart_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_5_D_IN;
    if (uart_uart_vrRecvBuffer_6_EN)
      uart_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_6_D_IN;
    if (uart_uart_vrRecvBuffer_7_EN)
      uart_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrRecvBuffer_7_D_IN;
    if (uart_uart_vrXmitBuffer_0_EN)
      uart_uart_vrXmitBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_0_D_IN;
    if (uart_uart_vrXmitBuffer_1_EN)
      uart_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_1_D_IN;
    if (uart_uart_vrXmitBuffer_2_EN)
      uart_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_2_D_IN;
    if (uart_uart_vrXmitBuffer_3_EN)
      uart_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_3_D_IN;
    if (uart_uart_vrXmitBuffer_4_EN)
      uart_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_4_D_IN;
    if (uart_uart_vrXmitBuffer_5_EN)
      uart_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_5_D_IN;
    if (uart_uart_vrXmitBuffer_6_EN)
      uart_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_6_D_IN;
    if (uart_uart_vrXmitBuffer_7_EN)
      uart_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_7_D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      dump <= `BSV_ASSIGNMENT_DELAY 32'd0;
      dump1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      rg_cnt <= `BSV_ASSIGNMENT_DELAY 5'd0;
      rg_read_rx <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
      uart_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
      uart_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 3'd0;
    end
  else
    begin
      if (dump_EN) dump <= `BSV_ASSIGNMENT_DELAY dump_D_IN;
      if (dump1_EN) dump1 <= `BSV_ASSIGNMENT_DELAY dump1_D_IN;
      if (rg_cnt_EN) rg_cnt <= `BSV_ASSIGNMENT_DELAY rg_cnt_D_IN;
      if (rg_read_rx_EN) rg_read_rx <= `BSV_ASSIGNMENT_DELAY rg_read_rx_D_IN;
      if (uart_uart_rRecvBitCount_EN)
	uart_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvBitCount_D_IN;
      if (uart_uart_rRecvCellCount_EN)
	uart_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvCellCount_D_IN;
      if (uart_uart_rRecvParity_EN)
	uart_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvParity_D_IN;
      if (uart_uart_rRecvState_EN)
	uart_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvState_D_IN;
      if (uart_uart_rXmitBitCount_EN)
	uart_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitBitCount_D_IN;
      if (uart_uart_rXmitCellCount_EN)
	uart_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitCellCount_D_IN;
      if (uart_uart_rXmitDataOut_EN)
	uart_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitDataOut_D_IN;
      if (uart_uart_rXmitParity_EN)
	uart_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitParity_D_IN;
      if (uart_uart_rXmitState_EN)
	uart_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitState_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bootrom_dut_read_request_sent = 1'h0;
    bootrom_dut_rg_req = 4'hA;
    bootrom_read_state = 1'h0;
    bootrom_rg_rd_id = 4'hA;
    bootrom_rg_read_packet = 52'hAAAAAAAAAAAAA;
    bootrom_rg_readburst_counter = 8'hAA;
    bootrom_rg_write_response = 6'h2A;
    bootrom_write_state = 1'h0;
    dump = 32'hAAAAAAAA;
    dump1 = 32'hAAAAAAAA;
    main_memory_dut_read_request_sent = 1'h0;
    main_memory_read_state = 1'h0;
    main_memory_rg_rd_id = 4'hA;
    main_memory_rg_read_packet = 52'hAAAAAAAAAAAAA;
    main_memory_rg_readburst_counter = 8'hAA;
    main_memory_rg_write_packet = 52'hAAAAAAAAAAAAA;
    main_memory_write_state = 1'h0;
    rg_cnt = 5'h0A;
    rg_read_rx = 1'h0;
    uart_baud_value = 16'hAAAA;
    uart_uart_fifoRecv_countReg = 5'h0A;
    uart_uart_fifoXmit_countReg = 5'h0A;
    uart_uart_rRecvBitCount = 4'hA;
    uart_uart_rRecvCellCount = 4'hA;
    uart_uart_rRecvData = 1'h0;
    uart_uart_rRecvParity = 1'h0;
    uart_uart_rRecvState = 3'h2;
    uart_uart_rXmitBitCount = 4'hA;
    uart_uart_rXmitCellCount = 4'hA;
    uart_uart_rXmitDataOut = 1'h0;
    uart_uart_rXmitParity = 1'h0;
    uart_uart_rXmitState = 3'h2;
    uart_uart_vrRecvBuffer_0 = 1'h0;
    uart_uart_vrRecvBuffer_1 = 1'h0;
    uart_uart_vrRecvBuffer_2 = 1'h0;
    uart_uart_vrRecvBuffer_3 = 1'h0;
    uart_uart_vrRecvBuffer_4 = 1'h0;
    uart_uart_vrRecvBuffer_5 = 1'h0;
    uart_uart_vrRecvBuffer_6 = 1'h0;
    uart_uart_vrRecvBuffer_7 = 1'h0;
    uart_uart_vrXmitBuffer_0 = 1'h0;
    uart_uart_vrXmitBuffer_1 = 1'h0;
    uart_uart_vrXmitBuffer_2 = 1'h0;
    uart_uart_vrXmitBuffer_3 = 1'h0;
    uart_uart_vrXmitBuffer_4 = 1'h0;
    uart_uart_vrXmitBuffer_5 = 1'h0;
    uart_uart_vrXmitBuffer_6 = 1'h0;
    uart_uart_vrXmitBuffer_7 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    begin
      v__h18750 = $time;
      #0;
    end
    begin
      TASK_testplusargs___d488 = $test$plusargs("fullverbose");
      #0;
    end
    begin
      TASK_testplusargs___d489 = $test$plusargs("mtb");
      #0;
    end
    begin
      TASK_testplusargs___d490 = $test$plusargs("l0");
      #0;
    end
    begin
      v__h18820 = $time;
      #0;
    end
    if (TASK_testplusargs___d488 ||
	TASK_testplusargs___d489 && TASK_testplusargs___d490)
      $write("[%10d", v__h18820, "] ");
    if (TASK_testplusargs___d488 ||
	TASK_testplusargs___d489 && TASK_testplusargs___d490)
      $write("\n[%10d]", v__h18750);
    if (TASK_testplusargs___d488 ||
	TASK_testplusargs___d489 && TASK_testplusargs___d490)
      $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump)
	begin
	  TASK_fopen___d497 = $fopen("rtl.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump && TASK_fopen___d497 == 32'd0)
	begin
	  TASK_testplusargs___d499 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump && TASK_fopen___d497 == 32'd0)
	begin
	  TASK_testplusargs___d500 = $test$plusargs("mtb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump && TASK_fopen___d497 == 32'd0)
	begin
	  TASK_testplusargs___d501 = $test$plusargs("l0");
	  #0;
	end
    TASK_fopen_97_EQ_0_98_AND_TASK_testplusargs_99_ETC___d504 =
	TASK_fopen___d497 == 32'd0 &&
	(TASK_testplusargs___d499 ||
	 TASK_testplusargs___d500 && TASK_testplusargs___d501);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump && TASK_fopen___d497 == 32'd0)
	begin
	  v__h19085 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump &&
	  TASK_fopen_97_EQ_0_98_AND_TASK_testplusargs_99_ETC___d504)
	$write("[%10d", v__h19085, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump &&
	  TASK_fopen_97_EQ_0_98_AND_TASK_testplusargs_99_ETC___d504)
	$write("TB: cannot open %s", "rtl.dump");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump &&
	  TASK_fopen_97_EQ_0_98_AND_TASK_testplusargs_99_ETC___d504)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_rtldump && TASK_fopen___d497 == 32'd0)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app)
	begin
	  TASK_fopen___d506 = $fopen("app_log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app && TASK_fopen___d506 == 32'd0)
	begin
	  TASK_testplusargs___d508 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app && TASK_fopen___d506 == 32'd0)
	begin
	  TASK_testplusargs___d509 = $test$plusargs("mtb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app && TASK_fopen___d506 == 32'd0)
	begin
	  TASK_testplusargs___d510 = $test$plusargs("l0");
	  #0;
	end
    TASK_fopen_06_EQ_0_07_AND_TASK_testplusargs_08_ETC___d513 =
	TASK_fopen___d506 == 32'd0 &&
	(TASK_testplusargs___d508 ||
	 TASK_testplusargs___d509 && TASK_testplusargs___d510);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app && TASK_fopen___d506 == 32'd0)
	begin
	  v__h19496 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app &&
	  TASK_fopen_06_EQ_0_07_AND_TASK_testplusargs_08_ETC___d513)
	$write("[%10d", v__h19496, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app &&
	  TASK_fopen_06_EQ_0_07_AND_TASK_testplusargs_08_ETC___d513)
	$write("TB: cannot open %s", "app_log");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app &&
	  TASK_fopen_06_EQ_0_07_AND_TASK_testplusargs_08_ETC___d513)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_open_file_app && TASK_fopen___d506 == 32'd0)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE) if (soc_mv_end_simulation) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write_dump_file)
	$fwrite(dump,
		soc_io_dump_get[102:101],
		" 0x%16h",
		soc_io_dump_get[100:69],
		" (0x%8h",
		soc_io_dump_get[68:37],
		")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write_dump_file)
	$fwrite(dump,
		" x%d",
		soc_io_dump_get[36:32],
		" 0x%8h",
		soc_io_dump_get[31:0],
		"\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write_received_character)
	$fwrite(dump1, "%c", data__h20549);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_address_channel)
	begin
	  TASK_testplusargs___d180 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_address_channel)
	begin
	  TASK_testplusargs___d181 = $test$plusargs("mbram");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_address_channel)
	begin
	  TASK_testplusargs___d182 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_address_channel)
	begin
	  v__h13389 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_address_channel &&
	  (TASK_testplusargs___d180 ||
	   TASK_testplusargs___d181 && TASK_testplusargs___d182))
	$write("[%10d", v__h13389, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_address_channel &&
	  (TASK_testplusargs___d180 ||
	   TASK_testplusargs___d181 && TASK_testplusargs___d182))
	$write("",
	       "MainMEM",
	       ": Recieved Write Request for Address: %h Index: %h Data: %h wrstrb: %h",
	       main_memory_s_xactor_f_wr_addr_D_OUT[51:20],
	       main_memory_s_xactor_f_wr_addrD_OUT_BITS_51_T_ETC__q8[24:2],
	       main_memory_s_xactor_f_wr_data_D_OUT[40:9],
	       main_memory_s_xactor_f_wr_data_D_OUT[8:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_address_channel &&
	  (TASK_testplusargs___d180 ||
	   TASK_testplusargs___d181 && TASK_testplusargs___d182))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_data_channel)
	begin
	  TASK_testplusargs___d216 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_data_channel)
	begin
	  TASK_testplusargs___d217 = $test$plusargs("mbram");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_data_channel)
	begin
	  TASK_testplusargs___d218 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_data_channel)
	begin
	  v__h13849 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_data_channel &&
	  (TASK_testplusargs___d216 ||
	   TASK_testplusargs___d217 && TASK_testplusargs___d218))
	$write("[%10d", v__h13849, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_data_channel &&
	  (TASK_testplusargs___d216 ||
	   TASK_testplusargs___d217 && TASK_testplusargs___d218))
	$write("",
	       "MainMEM",
	       ": Recieved Write Request for Address: %h Index: %h Data: %h wrstrb: %h",
	       addr__h13604,
	       addr3604_MINUS_0x80000000__q9[24:2],
	       main_memory_s_xactor_f_wr_data_D_OUT[40:9],
	       main_memory_s_xactor_f_wr_data_D_OUT[8:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_write_request_data_channel &&
	  (TASK_testplusargs___d216 ||
	   TASK_testplusargs___d217 && TASK_testplusargs___d218))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_response)
	begin
	  TASK_testplusargs___d289 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_response)
	begin
	  TASK_testplusargs___d290 = $test$plusargs("mbram");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_response)
	begin
	  TASK_testplusargs___d291 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_response)
	begin
	  v__h14957 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_response &&
	  (TASK_testplusargs___d289 ||
	   TASK_testplusargs___d290 && TASK_testplusargs___d291))
	$write("[%10d", v__h14957, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_response &&
	  (TASK_testplusargs___d289 ||
	   TASK_testplusargs___d290 && TASK_testplusargs___d291))
	$write("",
	       "MainMEM",
	       ": Responding Read Request with Data: %h ",
	       main_memory_dut_dmemMSB_DOA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_response &&
	  (TASK_testplusargs___d289 ||
	   TASK_testplusargs___d290 && TASK_testplusargs___d291))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_first)
	begin
	  TASK_testplusargs___d234 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_first)
	begin
	  TASK_testplusargs___d235 = $test$plusargs("mbram");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_first)
	begin
	  TASK_testplusargs___d236 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_first)
	begin
	  v__h14200 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_first &&
	  (TASK_testplusargs___d234 ||
	   TASK_testplusargs___d235 && TASK_testplusargs___d236))
	$write("[%10d", v__h14200, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_first &&
	  (TASK_testplusargs___d234 ||
	   TASK_testplusargs___d235 && TASK_testplusargs___d236))
	$write("",
	       "MainMEM",
	       ": Recieved Read Request for Address: %h Index: %h",
	       main_memory_s_xactor_f_rd_addr_D_OUT[51:20],
	       main_memory_s_xactor_f_rd_addrD_OUT_BITS_51_T_ETC__q7[24:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_first &&
	  (TASK_testplusargs___d234 ||
	   TASK_testplusargs___d235 && TASK_testplusargs___d236))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_burst &&
	  !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251)
	begin
	  TASK_testplusargs___d279 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_burst &&
	  !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251)
	begin
	  TASK_testplusargs___d280 = $test$plusargs("mbram");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_burst &&
	  !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251)
	begin
	  TASK_testplusargs___d281 = $test$plusargs("l0");
	  #0;
	end
    NOT_main_memory_rg_readburst_counter_48_EQ_mai_ETC___d284 =
	!main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251 &&
	(TASK_testplusargs___d279 ||
	 TASK_testplusargs___d280 && TASK_testplusargs___d281);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_burst &&
	  !main_memory_rg_readburst_counter_48_EQ_main_me_ETC___d251)
	begin
	  v__h14780 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_burst &&
	  NOT_main_memory_rg_readburst_counter_48_EQ_mai_ETC___d284)
	$write("[%10d", v__h14780, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_burst &&
	  NOT_main_memory_rg_readburst_counter_48_EQ_mai_ETC___d284)
	$write("",
	       "MainMEM",
	       ": Recieved Read Request for Address: %h Index: %h",
	       address__h14451,
	       address4451_MINUS_0x80000000__q6[24:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_memory_read_request_burst &&
	  NOT_main_memory_rg_readburst_counter_48_EQ_mai_ETC___d284)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_response)
	begin
	  TASK_testplusargs___d384 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_response)
	begin
	  TASK_testplusargs___d385 = $test$plusargs("mbootrom");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_response)
	begin
	  TASK_testplusargs___d386 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_response)
	begin
	  v__h17714 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_response &&
	  (TASK_testplusargs___d384 ||
	   TASK_testplusargs___d385 && TASK_testplusargs___d386))
	$write("[%10d", v__h17714, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_response &&
	  (TASK_testplusargs___d384 ||
	   TASK_testplusargs___d385 && TASK_testplusargs___d386))
	$write("BootROM : Responding Read Request with Data: %h ",
	       bootrom_dut_dmemLSB_DO);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_response &&
	  (TASK_testplusargs___d384 ||
	   TASK_testplusargs___d385 && TASK_testplusargs___d386))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_request_first)
	begin
	  TASK_testplusargs___d329 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_request_first)
	begin
	  TASK_testplusargs___d330 = $test$plusargs("mbootrom");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_request_first)
	begin
	  TASK_testplusargs___d331 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_request_first)
	begin
	  v__h16937 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_request_first &&
	  (TASK_testplusargs___d329 ||
	   TASK_testplusargs___d330 && TASK_testplusargs___d331))
	$write("[%10d", v__h16937, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_request_first &&
	  (TASK_testplusargs___d329 ||
	   TASK_testplusargs___d330 && TASK_testplusargs___d331))
	$write("BootROM: Recieved Read Request for Address: %h Index Address: %h b: %d",
	       bootrom_s_xactor_f_rd_addr_D_OUT[51:20],
	       bootrom_s_xactor_f_rd_addrD_OUT_BITS_51_TO_20_ETC__q5[14:2],
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bootrom_read_request_first &&
	  (TASK_testplusargs___d329 ||
	   TASK_testplusargs___d330 && TASK_testplusargs___d331))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (bootrom_read_state &&
	  !bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343)
	begin
	  TASK_testplusargs___d374 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (bootrom_read_state &&
	  !bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343)
	begin
	  TASK_testplusargs___d375 = $test$plusargs("mbootrom");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (bootrom_read_state &&
	  !bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343)
	begin
	  TASK_testplusargs___d376 = $test$plusargs("l0");
	  #0;
	end
    NOT_bootrom_rg_readburst_counter_40_EQ_bootrom_ETC___d379 =
	!bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343 &&
	(TASK_testplusargs___d374 ||
	 TASK_testplusargs___d375 && TASK_testplusargs___d376);
    if (RST_N != `BSV_RESET_VALUE)
      if (bootrom_read_state &&
	  !bootrom_rg_readburst_counter_40_EQ_bootrom_rg__ETC___d343)
	begin
	  v__h17588 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (bootrom_read_state &&
	  NOT_bootrom_rg_readburst_counter_40_EQ_bootrom_ETC___d379)
	$write("[%10d", v__h17588, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (bootrom_read_state &&
	  NOT_bootrom_rg_readburst_counter_40_EQ_bootrom_ETC___d379)
	$write("BootROM: Recieved Read Request for Address: %h Index Address: %h b: %d",
	       address__h17175,
	       address7175_MINUS_0x1000__q4[14:2],
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (bootrom_read_state &&
	  NOT_bootrom_rg_readburst_counter_40_EQ_bootrom_ETC___d379)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkTbSoc

